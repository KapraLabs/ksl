PS C:\rn\ksl> cargo check
   Compiling unicode-ident v1.0.18
    Checking cfg-if v1.0.0
    Checking stable_deref_trait v1.2.0
    Checking once_cell v1.21.3
    Checking memchr v2.7.4
    Checking smallvec v1.15.0
    Checking log v0.4.27
    Checking typenum v1.18.0
    Checking windows_x86_64_msvc v0.52.6
    Checking byteorder v1.5.0
    Checking fallible-iterator v0.2.0
    Checking libc v0.2.172
    Checking zerocopy v0.8.25
    Checking target-lexicon v0.12.16
   Compiling proc-macro2 v1.0.95
   Compiling getrandom v0.3.3
    Checking getrandom v0.2.16
    Checking windows-targets v0.52.6
    Checking cpufeatures v0.2.17
   Compiling cranelift-codegen-shared v0.88.2
    Checking windows-sys v0.59.0
    Checking winapi v0.3.9
   Compiling cranelift-codegen-meta v0.88.2
   Compiling jobserver v0.1.33
    Checking ahash v0.7.8
    Checking rand_core v0.6.4
    Checking writeable v0.6.1
    Checking bumpalo v3.17.0
    Checking litemap v0.8.0
    Checking either v1.15.0
    Checking fxhash v0.2.1
    Checking hashbrown v0.12.3
   Compiling cc v1.2.22
    Checking anyhow v1.0.98
    Checking crc32fast v1.4.2
    Checking slice-group-by v0.3.1
    Checking opaque-debug v0.3.1
    Checking windows_x86_64_msvc v0.36.1
    Checking regex-syntax v0.8.5
   Compiling quote v1.0.40
    Checking aho-corasick v1.1.3
    Checking subtle v2.6.1
    Checking arrayvec v0.7.6
    Checking generic-array v0.14.7
   Compiling syn v2.0.101
    Checking regalloc2 v0.3.2
    Checking windows-sys v0.36.1
    Checking icu_normalizer_data v2.0.0
    Checking crossbeam-utils v0.8.21
    Checking icu_properties_data v2.0.0
    Checking getrandom v0.1.16
    Checking bitflags v2.9.0
    Checking rand_core v0.5.1
    Checking leb128fmt v0.1.0
    Checking humantime v2.2.0
    Checking scopeguard v1.2.0
    Checking wasm-encoder v0.230.0
    Checking crypto-common v0.1.6
    Checking digest v0.9.0
    Checking inout v0.1.4
    Checking crossbeam-epoch v0.9.18
    Checking block-buffer v0.9.0
    Checking cipher v0.4.4
    Checking universal-hash v0.5.1
    Checking sha2 v0.9.9
    Checking lock_api v0.4.12
    Checking block-buffer v0.10.4
    Checking regex-automata v0.4.9
    Checking memoffset v0.6.5
    Checking crossbeam-deque v0.8.6
    Checking parking_lot_core v0.9.10
    Checking generic-array v0.9.1
    Checking ppv-lite86 v0.2.21
    Checking itertools v0.10.5
    Checking windows-sys v0.52.0
    Checking wasmtime-asm-macros v1.0.2
    Checking keccak v0.1.5
    Checking winapi-util v0.1.9
    Checking errno v0.3.11
    Checking rustix v0.38.44
    Checking termcolor v1.4.1
    Checking is-terminal v0.4.16
    Checking utf8_iter v1.0.4
    Checking rand_chacha v0.3.1
    Checking memfd v0.6.4
    Checking unicode-width v0.2.0
    Checking byte-tools v0.2.0
    Checking percent-encoding v2.3.1
    Checking arrayref v0.3.9
    Checking rand_chacha v0.2.2
    Checking rand v0.8.5
    Checking digest v0.7.6
    Checking block-buffer v0.3.3
    Checking form_urlencoded v1.2.1
    Checking parking_lot v0.12.3
    Checking wast v230.0.0
    Checking rayon-core v1.12.1
    Checking cpp_demangle v0.3.5
    Checking digest v0.10.7
    Checking polyval v0.6.2
    Checking num_cpus v1.16.0
    Checking dirs-sys-next v0.1.2
    Checking signature v1.6.4
    Checking os_str_bytes v6.6.1
    Checking directories-next v2.0.0
    Checking rustc-demangle v0.1.24
    Checking base64 v0.13.1
    Checking ed25519 v1.5.3
    Checking rayon v1.10.0
    Checking ghash v0.5.1
    Checking clap_lex v0.2.4
    Checking threadpool v1.8.1
    Checking rand v0.4.6
    Checking atty v0.2.14
    Checking sha3 v0.7.3
    Checking rand v0.7.3
    Checking num-traits v0.2.19
    Checking same-file v1.0.6
    Checking ctr v0.9.2
    Checking aes v0.8.4
    Checking aead v0.5.2
    Checking itertools v0.7.11
    Checking diff v0.1.13
   Compiling wasmtime-fiber v1.0.2
   Compiling zstd-sys v2.0.15+zstd.1.5.7
   Compiling ittapi-sys v0.3.5
   Compiling pqcrypto-internals v0.2.10
    Checking regex v1.11.1
   Compiling wasmtime-runtime v1.0.2
   Compiling psm v0.1.26
   Compiling blst v0.3.14
   Compiling pqcrypto-dilithium v0.5.0
    Checking socket2 v0.5.9
   Compiling cranelift-codegen v0.88.2
    Checking env_logger v0.10.2
    Checking mio v1.0.3
    Checking ryu v1.0.20
    Checking textwrap v0.16.2
    Checking bytes v1.10.1
    Checking file-per-thread-logger v0.1.6
   Compiling wasmtime v1.0.2
    Checking yansi v1.0.1
    Checking itoa v1.0.15
    Checking pqcrypto-traits v0.3.5
    Checking fastrand v2.3.0
    Checking leb128 v0.2.5
    Checking pin-project-lite v0.2.16
    Checking strsim v0.10.0
    Checking bitflags v1.3.2
    Checking windows-link v0.1.1
    Checking wasm-encoder v0.20.0
    Checking dilithium v0.1.2+deprecated
    Checking tempfile v3.19.1
    Checking aes-gcm v0.10.3
    Checking pretty_assertions v1.4.1
    Checking walkdir v2.5.0
    Checking sha2 v0.10.9
    Checking sha3 v0.10.8
    Checking base64 v0.21.7
    Checking ittapi v0.3.5
   Compiling synstructure v0.13.2
   Compiling serde_derive v1.0.219
   Compiling zerofrom-derive v0.1.6
   Compiling yoke-derive v0.8.0
   Compiling zerovec-derive v0.11.1
   Compiling displaydoc v0.2.5
   Compiling thiserror-impl v2.0.12
   Compiling thiserror-impl v1.0.69
   Compiling zeroize_derive v1.4.2
   Compiling tokio-macros v2.5.0
   Compiling async-trait v0.1.88
   Compiling inkwell_internals v0.8.0
   Compiling zstd-safe v5.0.2+zstd.1.5.2
    Checking zstd v0.11.2+zstd.1.5.2
    Checking zeroize v1.8.1
    Checking tokio v1.45.0
    Checking curve25519-dalek v3.2.0
    Checking thiserror v1.0.69
    Checking zerofrom v0.1.6
   Compiling thiserror v2.0.12
   Compiling pest v2.8.0
    Checking yoke v0.8.0
    Checking zerovec v0.11.2
    Checking zerotrie v0.2.2
    Checking wat v1.230.0
    Checking tinystr v0.8.1
    Checking potential_utf v0.1.2
    Checking icu_collections v2.0.0
    Checking serde v1.0.219
    Checking icu_locale_core v2.0.0
   Compiling semver-parser v0.10.3
   Compiling semver v0.11.0
    Checking icu_provider v2.0.0
   Compiling llvm-sys v120.3.2
    Checking icu_properties v2.0.0
    Checking icu_normalizer v2.0.0
   Compiling inkwell v0.2.0
    Checking idna_adapter v1.2.1
    Checking idna v1.0.3
    Checking url v2.5.4
    Checking indexmap v1.9.3
    Checking cranelift-entity v0.88.2
    Checking bincode v1.3.3
    Checking toml v0.5.11
    Checking ed25519-dalek v1.0.1
    Checking chrono v0.4.41
    Checking serde_json v1.0.140
    Checking cranelift-bforest v0.88.2
    Checking gimli v0.26.2
    Checking wasmparser v0.89.1
    Checking object v0.29.0
    Checking clap v3.2.25
    Checking wasmparser v0.100.0
    Checking wasmtime-cache v1.0.2
    Checking wasmtime-types v1.0.2
    Checking addr2line v0.17.0
    Checking wasmtime-environ v1.0.2
    Checking wasmtime-jit-debug v1.0.2
    Checking wasmtime-jit v1.0.2
    Checking cranelift-frontend v0.88.2
    Checking cranelift-native v0.88.2
    Checking cranelift-wasm v0.88.2
    Checking wasmtime-cranelift v1.0.2
    Checking kapra_chain v0.1.0 (C:\rn\ksl)
error: expected one of `::`, `=>`, `if`, or `|`, found `=`
   --> src\ksl_parser.rs:252:41
    |
252 |             'a'..='z' | 'A'.. Literatura='Z' | '_' => self.read_identifier(),
    |                                         ^
    |                                         |
    |                                         expected one of `::`, `=>`, `if`, or `|`
    |                                         help: use a fat arrow to start a match arm: `=>`

error: expected one of `,`, `.`, `?`, `}`, or an operator, found `=>`
   --> src\ksl_parser.rs:252:52
    |
252 |             'a'..='z' | 'A'.. Literatura='Z' | '_' => self.read_identifier(),
    |                                                    ^^ expected one of `,`, `.`, `?`, `}`, or an operator

error: expected a pattern, found an expression
   --> src\ksl_parser.rs:384:27
    |
384 |             Token::Symbol("#".to_string()) => {
    |                           ^^^^^^^^^^^^^^^ not a pattern
    |
    = note: arbitrary expressions are not allowed in patterns: <https://doc.rust-lang.org/book/ch19-00-patterns.html>
help: consider moving the expression to a match arm guard
    |
384 -             Token::Symbol("#".to_string()) => {
384 +             Token::Symbol(val) if val == "#".to_string() => {
    |
help: consider extracting the expression into a `const`
    |
383 +         const VAL: /* Type */ = "#".to_string();
384 ~         match &self.current {
385 ~             Token::Symbol(VAL) => {
    |

error: couldn't read `src\../templates/contract.ksl`: The system cannot find the file specified. (os error 2)
   --> src\ksl_scaffold.rs:212:57
    |
212 |         handlebars.register_template_string("contract", include_str!("../templates/contract.ksl"))
    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this error originates in the macro `include_str` (in Nightly builds, run with -Z macro-backtrace for more info)

error: couldn't read `src\../templates/validator.ksl`: The system cannot find the file specified. (os error 2)
   --> src\ksl_scaffold.rs:214:58
    |
214 |         handlebars.register_template_string("validator", include_str!("../templates/validator.ksl"))
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this error originates in the macro `include_str` (in Nightly builds, run with -Z macro-backtrace for more info)

error: couldn't read `src\../templates/ai.ksl`: The system cannot find the file specified. (os error 2)
   --> src\ksl_scaffold.rs:216:51
    |
216 |         handlebars.register_template_string("ai", include_str!("../templates/ai.ksl"))
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this error originates in the macro `include_str` (in Nightly builds, run with -Z macro-backtrace for more info)

error: couldn't read `src\../templates/iot.ksl`: The system cannot find the file specified. (os error 2)
   --> src\ksl_scaffold.rs:218:52
    |
218 |         handlebars.register_template_string("iot", include_str!("../templates/iot.ksl"))
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this error originates in the macro `include_str` (in Nightly builds, run with -Z macro-backtrace for more info)

error: couldn't read `src\../templates/shard.ksl`: The system cannot find the file specified. (os error 2)
   --> src\ksl_scaffold.rs:220:54
    |
220 |         handlebars.register_template_string("shard", include_str!("../templates/shard.ksl"))
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this error originates in the macro `include_str` (in Nightly builds, run with -Z macro-backtrace for more info)

error: couldn't read `src\../templates/zk.ksl`: The system cannot find the file specified. (os error 2)
   --> src\ksl_scaffold.rs:222:51
    |
222 |         handlebars.register_template_string("zk", include_str!("../templates/zk.ksl"))
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this error originates in the macro `include_str` (in Nightly builds, run with -Z macro-backtrace for more info)

error: couldn't read `src\../templates/abi.json`: The system cannot find the file specified. (os error 2)
   --> src\ksl_scaffold.rs:418:28
    |
418 |         let abi_template = include_str!("../templates/abi.json");
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this error originates in the macro `include_str` (in Nightly builds, run with -Z macro-backtrace for more info)

error: couldn't read `src\../templates/sandbox.toml`: The system cannot find the file specified. (os error 2)
   --> src\ksl_scaffold.rs:426:32
    |
426 |         let sandbox_template = include_str!("../templates/sandbox.toml");
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this error originates in the macro `include_str` (in Nightly builds, run with -Z macro-backtrace for more info)

error: couldn't read `src\../templates/verifier.ksl`: The system cannot find the file specified. (os error 2)
   --> src\ksl_scaffold.rs:434:33
    |
434 |         let verifier_template = include_str!("../templates/verifier.ksl");
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this error originates in the macro `include_str` (in Nightly builds, run with -Z macro-backtrace for more info)

error: couldn't read `src\../templates/preview.html`: The system cannot find the file specified. (os error 2)
   --> src\ksl_scaffold.rs:605:37
    |
605 |         let mut html = String::from(include_str!("../templates/preview.html"));
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this error originates in the macro `include_str` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0255]: the name `AstNode` is defined multiple times
  --> src\ksl_checker.rs:42:1
   |
5  | use crate::ksl_parser::{AstNode, ExprKind};
   |                         ------- previous import of the type `AstNode` here
...
42 | pub enum AstNode {
   | ^^^^^^^^^^^^^^^^ `AstNode` redefined here
   |
   = note: `AstNode` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
5  | use crate::ksl_parser::{AstNode as OtherAstNode, ExprKind};
   |                                 +++++++++++++++

error[E0365]: `Type` is private, and cannot be re-exported
    --> src\ksl_checker.rs:1077:21
     |
1077 |     pub use super::{Type, TypeContext, TypeError, TypeSystem};
     |                     ^^^^ re-export of private `Type`
     |
     = note: consider declaring type or module `Type` with `pub`

error[E0365]: `TypeContext` is private, and cannot be re-exported
    --> src\ksl_checker.rs:1077:27
     |
1077 |     pub use super::{Type, TypeContext, TypeError, TypeSystem};
     |                           ^^^^^^^^^^^ re-export of private `TypeContext`
     |
     = note: consider declaring type or module `TypeContext` with `pub`

error[E0365]: `TypeError` is private, and cannot be re-exported
    --> src\ksl_checker.rs:1077:40
     |
1077 |     pub use super::{Type, TypeContext, TypeError, TypeSystem};
     |                                        ^^^^^^^^^ re-export of private `TypeError`
     |
     = note: consider declaring type or module `TypeError` with `pub`

error[E0364]: `TypeSystem` is private, and cannot be re-exported
    --> src\ksl_checker.rs:1077:51
     |
1077 |     pub use super::{Type, TypeContext, TypeError, TypeSystem};
     |                                                   ^^^^^^^^^^
     |
note: consider marking `TypeSystem` as `pub` in the imported module
    --> src\ksl_checker.rs:1077:51
     |
1077 |     pub use super::{Type, TypeContext, TypeError, TypeSystem};
     |                                                   ^^^^^^^^^^

error[E0432]: unresolved import `crate::ksl_bytecode`
 --> src\ksl_compiler.rs:6:12
  |
6 | use crate::ksl_bytecode::{KapraBytecode, KapraInstruction, KapraOpCode, Operand};
  |            ^^^^^^^^^^^^
  |            |
  |            unresolved import
  |            help: a similar path exists: `ksl_errors::ksl_bytecode`

error[E0432]: unresolved import `crate::ksl_stdlib`
 --> src\ksl_compiler.rs:7:12
  |
7 | use crate::ksl_stdlib::StdLib;
  |            ^^^^^^^^^^ could not find `ksl_stdlib` in the crate root

error[E0432]: unresolved import `crate::ksl_macros`
 --> src\ksl_compiler.rs:9:12
  |
9 | use crate::ksl_macros::{MacroExpander, MacroDef, HotReloadableFunction, HotReloadableFunctions, HotReloadConfig};
  |            ^^^^^^^^^^
  |            |
  |            unresolved import
  |            help: a similar path exists: `ksl_checker::ksl_macros`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `rayon`
  --> src\ksl_compiler.rs:25:5
   |
25 | use rayon::prelude::*;
   |     ^^^^^ use of unresolved module or unlinked crate `rayon`
   |
   = help: if you wanted to use a crate named `rayon`, use `cargo add rayon` to add it to your `Cargo.toml`

error[E0432]: unresolved import `crate::ksl_generics`
  --> src\ksl_compiler.rs:10:12
   |
10 | use crate::ksl_generics::{GenericCompiler, GenericDef, TypeParam};
   |            ^^^^^^^^^^^^
   |            |
   |            unresolved import
   |            help: a similar path exists: `ksl_checker::ksl_generics`

error[E0432]: unresolved import `crate::ksl_ast::AstNode`
 --> src\ksl_llvm.rs:4:22
  |
4 | use crate::ksl_ast::{AstNode, Expr, Literal, BinaryOperator, Type, Function};
  |                      ^^^^^^^ no `AstNode` in `ksl_ast`
  |
  = help: consider importing one of these enums instead:
          crate::AstNode
          crate::ksl_checker::AstNode
          crate::ksl_types::AstNode

error[E0432]: unresolved import `crate::ksl_version`
  --> src\ksl_llvm.rs:16:12
   |
16 | use crate::ksl_version::{ContractVersion, VersionManager};
   |            ^^^^^^^^^^^ could not find `ksl_version` in the crate root

error[E0432]: unresolved imports `super::AstNode`, `super::ExprKind`
   --> src\ksl_errors.rs:268:21
    |
268 |     pub use super::{AstNode, ExprKind};
    |                     ^^^^^^^  ^^^^^^^^ no `ExprKind` in `ksl_errors`
    |                     |
    |                     no `AstNode` in `ksl_errors`
    |
    = help: consider importing one of these enums instead:
            crate::AstNode
            crate::ksl_checker::AstNode
            crate::ksl_types::AstNode
    = help: consider importing one of these enums instead:
            crate::ExprKind
            crate::ksl_types::ExprKind

error[E0432]: unresolved import `super::Type`
   --> src\ksl_errors.rs:272:13
    |
272 |     pub use super::Type;
    |             ^^^^^^^^^^^ no `Type` in `ksl_errors`
    |
help: consider importing one of these items instead
    |
272 -     pub use super::Type;
272 +     pub use crate::KslError::Type;
    |
272 -     pub use super::Type;
272 +     pub use crate::SymbolKind::Type;
    |
272 -     pub use super::Type;
272 +     pub use crate::SymbolType::Type;
    |
272 -     pub use super::Type;
272 +     pub use crate::Type;
    |
      and 33 other candidates

error[E0432]: unresolved imports `super::KapraBytecode`, `super::KapraInstruction`, `super::KapraOpCode`, `super::Operand`
   --> src\ksl_errors.rs:276:21
    |
276 |     pub use super::{KapraBytecode, KapraInstruction, KapraOpCode, Operand};
    |                     ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^ no `Operand` in `ksl_errors`
    |                     |              |                 |
    |                     |              |                 no `KapraOpCode` in `ksl_errors`
    |                     |              no `KapraInstruction` in `ksl_errors`
    |                     no `KapraBytecode` in `ksl_errors`

error[E0432]: unresolved imports `super::KapraVM`, `super::KapraRegister`, `super::KapraStack`
   --> src\ksl_errors.rs:280:21
    |
280 |     pub use super::{KapraVM, KapraRegister, KapraStack};
    |                     ^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^ no `KapraStack` in `ksl_errors`
    |                     |        |
    |                     |        no `KapraRegister` in `ksl_errors`
    |                     no `KapraVM` in `ksl_errors`

error[E0432]: unresolved import `crate::ksl_package`
 --> src\ksl_scaffold.rs:8:12
  |
8 | use crate::ksl_package::{Package, PackageConfig, Dependency};
  |            ^^^^^^^^^^^ could not find `ksl_package` in the crate root

error[E0432]: unresolved import `web_view`
  --> src\ksl_scaffold.rs:10:5
   |
10 | use web_view::*;
   |     ^^^^^^^^ use of unresolved module or unlinked crate `web_view`
   |
   = help: if you wanted to use a crate named `web_view`, use `cargo add web_view` to add it to your `Cargo.toml`

error[E0432]: unresolved import `crate::ksl_package`
 --> src\scaffold_lint.rs:5:12
  |
5 | use crate::ksl_package::Dependency;
  |            ^^^^^^^^^^^ could not find `ksl_package` in the crate root

error[E0432]: unresolved import `crate::ksl_bytecode`
 --> src\gas_profile.rs:4:12
  |
4 | use crate::ksl_bytecode::KapraOpCode;
  |            ^^^^^^^^^^^^
  |            |
  |            unresolved import
  |            help: a similar path exists: `ksl_compiler::ksl_bytecode`

error[E0432]: unresolved import `crate::ksl_kapra_crypto`
 --> src\ksl_smart_account.rs:2:12
  |
2 | use crate::ksl_kapra_crypto::FixedArray;
  |            ^^^^^^^^^^^^^^^^ could not find `ksl_kapra_crypto` in the crate root

error[E0432]: unresolved import `crate::ksl_kapra_crypto`
 --> src\ksl_ir.rs:6:12
  |
6 | use crate::ksl_kapra_crypto::FixedArray;
  |            ^^^^^^^^^^^^^^^^ could not find `ksl_kapra_crypto` in the crate root

error[E0432]: unresolved import `crate::kapra_vm`
 --> src\ksl_ir.rs:8:12
  |
8 | use crate::kapra_vm::ContractMetadata;
  |            ^^^^^^^^
  |            |
  |            unresolved import
  |            help: a similar path exists: `ksl_errors::kapra_vm`

error[E0432]: unresolved import `crate::ksl_ast::AstNode`
 --> src\ksl_abi.rs:1:22
  |
1 | use crate::ksl_ast::{AstNode, Function, Type};
  |                      ^^^^^^^ no `AstNode` in `ksl_ast`
  |
  = help: consider importing one of these enums instead:
          crate::AstNode
          crate::ksl_checker::AstNode
          crate::ksl_types::AstNode

error[E0432]: unresolved import `crate::ksl_linter`
 --> src\ksl_lsp.rs:7:12
  |
7 | use crate::ksl_linter::{LintError, lint};
  |            ^^^^^^^^^^ could not find `ksl_linter` in the crate root

error[E0432]: unresolved import `crate::ksl_docgen`
 --> src\ksl_lsp.rs:8:12
  |
8 | use crate::ksl_docgen::generate_docgen;
  |            ^^^^^^^^^^ could not find `ksl_docgen` in the crate root

error[E0432]: unresolved import `crate::ksl_analyzer`
  --> src\ksl_lsp.rs:10:12
   |
10 | use crate::ksl_analyzer::{Analyzer, AnalysisResult};
   |            ^^^^^^^^^^^^ could not find `ksl_analyzer` in the crate root

error[E0364]: `parse` is private, and cannot be re-exported
   --> src\ksl_lsp.rs:668:21
    |
668 |     pub use super::{parse, AstNode, ExprKind, ParseError};
    |                     ^^^^^
    |
note: consider marking `parse` as `pub` in the imported module
   --> src\ksl_lsp.rs:668:21
    |
668 |     pub use super::{parse, AstNode, ExprKind, ParseError};
    |                     ^^^^^

error[E0365]: `AstNode` is private, and cannot be re-exported
   --> src\ksl_lsp.rs:668:28
    |
668 |     pub use super::{parse, AstNode, ExprKind, ParseError};
    |                            ^^^^^^^ re-export of private `AstNode`
    |
    = note: consider declaring type or module `AstNode` with `pub`

error[E0365]: `ParseError` is private, and cannot be re-exported
   --> src\ksl_lsp.rs:668:47
    |
668 |     pub use super::{parse, AstNode, ExprKind, ParseError};
    |                                               ^^^^^^^^^^ re-export of private `ParseError`
    |
    = note: consider declaring type or module `ParseError` with `pub`

error[E0365]: `KslError` is private, and cannot be re-exported
   --> src\ksl_lsp.rs:680:21
    |
680 |     pub use super::{KslError, SourcePosition};
    |                     ^^^^^^^^ re-export of private `KslError`
    |
    = note: consider declaring type or module `KslError` with `pub`

error[E0365]: `SourcePosition` is private, and cannot be re-exported
   --> src\ksl_lsp.rs:680:31
    |
680 |     pub use super::{KslError, SourcePosition};
    |                               ^^^^^^^^^^^^^^ re-export of private `SourcePosition`
    |
    = note: consider declaring type or module `SourcePosition` with `pub`

error[E0432]: unresolved import `crate::ksl_async`
  --> src\ksl_lsp.rs:11:12
   |
11 | use crate::ksl_async::{AsyncRuntime, AsyncVM};
   |            ^^^^^^^^^
   |            |
   |            unresolved import
   |            help: a similar path exists: `ksl_parser::ksl_async`

error[E0432]: unresolved import `crate::ksl_kapra_zkp`
 --> src\ksl_types.rs:7:12
  |
7 | use crate::ksl_kapra_zkp::{ZkScheme, ZkProof as RuntimeZkProof};
  |            ^^^^^^^^^^^^^ could not find `ksl_kapra_zkp` in the crate root

error[E0432]: unresolved import `crate::ksl_bytecode`
 --> src\ksl_stdlib_crypto.rs:6:12
  |
6 | use crate::ksl_bytecode::{KapraOpCode, Operand, KapraInstruction};
  |            ^^^^^^^^^^^^
  |            |
  |            unresolved import
  |            help: a similar path exists: `ksl_compiler::ksl_bytecode`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `pqcrypto_traits`
  --> src\ksl_stdlib_crypto.rs:32:5
   |
32 | use pqcrypto_traits::sign::{
   |     ^^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `pqcrypto_traits`
   |
   = help: if you wanted to use a crate named `pqcrypto_traits`, use `cargo add pqcrypto_traits` to add it to your `Cargo.toml`

error[E0365]: `Type` is private, and cannot be re-exported
   --> src\ksl_stdlib_crypto.rs:739:21
    |
739 |     pub use super::{Type, TypeError};
    |                     ^^^^ re-export of private `Type`
    |
    = note: consider declaring type or module `Type` with `pub`

error[E0365]: `TypeError` is private, and cannot be re-exported
   --> src\ksl_stdlib_crypto.rs:739:27
    |
739 |     pub use super::{Type, TypeError};
    |                           ^^^^^^^^^ re-export of private `TypeError`
    |
    = note: consider declaring type or module `TypeError` with `pub`

error[E0365]: `KslError` is private, and cannot be re-exported
   --> src\ksl_stdlib_crypto.rs:747:21
    |
747 |     pub use super::{KslError, SourcePosition};
    |                     ^^^^^^^^ re-export of private `KslError`
    |
    = note: consider declaring type or module `KslError` with `pub`

error[E0365]: `SourcePosition` is private, and cannot be re-exported
   --> src\ksl_stdlib_crypto.rs:747:31
    |
747 |     pub use super::{KslError, SourcePosition};
    |                               ^^^^^^^^^^^^^^ re-export of private `SourcePosition`
    |
    = note: consider declaring type or module `SourcePosition` with `pub`

error[E0432]: unresolved import `rand`
  --> src\ksl_stdlib_crypto.rs:11:5
   |
11 | use rand::Rng;
   |     ^^^^ use of unresolved module or unlinked crate `rand`
   |
   = help: if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`

error[E0432]: unresolved import `crate::kapra_vm`
 --> src\ksl_syscalls.rs:1:12
  |
1 | use crate::kapra_vm::{KapraVM, RuntimeError, FixedArray, ContractMetadata};
  |            ^^^^^^^^
  |            |
  |            unresolved import
  |            help: a similar path exists: `ksl_errors::kapra_vm`

error[E0432]: unresolved import `crate::ksl_kapra_crypto`
 --> src\ksl_syscalls.rs:2:12
  |
2 | use crate::ksl_kapra_crypto::FixedArray;
  |            ^^^^^^^^^^^^^^^^ could not find `ksl_kapra_crypto` in the crate root

error[E0432]: unresolved import `crate::ksl_bytecode`
 --> src\ksl_syscalls.rs:3:12
  |
3 | use crate::ksl_bytecode::{KapraInstruction, KapraOpCode, Operand};
  |            ^^^^^^^^^^^^
  |            |
  |            unresolved import
  |            help: a similar path exists: `ksl_compiler::ksl_bytecode`

error[E0432]: unresolved import `crate::ksl_types::TransactionContext`
 --> src\ksl_syscalls.rs:5:5
  |
5 | use crate::ksl_types::TransactionContext;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `TransactionContext` in `ksl_types`

error[E0432]: unresolved import `crate::ksl_types::TxAction`
 --> src\ksl_syscalls.rs:6:5
  |
6 | use crate::ksl_types::TxAction;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ no `TxAction` in `ksl_types`

error[E0432]: unresolved import `crate::ksl_bytecode`
 --> src\ksl_syscalls.rs:7:12
  |
7 | use crate::ksl_bytecode::KapraBytecode;
  |            ^^^^^^^^^^^^
  |            |
  |            unresolved import
  |            help: a similar path exists: `ksl_compiler::ksl_bytecode`

error[E0432]: unresolved import `crate::ksl_value`
 --> src\ksl_syscalls.rs:8:12
  |
8 | use crate::ksl_value::Value;
  |            ^^^^^^^^^ could not find `ksl_value` in the crate root

error[E0432]: unresolved import `crate::ksl_analyzer`
  --> src\ksl_compiler.rs:11:12
   |
11 | use crate::ksl_analyzer::PerformanceMetrics;
   |            ^^^^^^^^^^^^
   |            |
   |            unresolved import
   |            help: a similar path exists: `ksl_lsp::ksl_analyzer`

error[E0432]: unresolved import `crate::ksl_wasm`
  --> src\ksl_compiler.rs:12:12
   |
12 | use crate::ksl_wasm::WasmGenerator;
   |            ^^^^^^^^ could not find `ksl_wasm` in the crate root

error[E0432]: unresolved import `crate::ksl_irgen`
  --> src\ksl_compiler.rs:33:12
   |
33 | use crate::ksl_irgen::generate_ir;
   |            ^^^^^^^^^ could not find `ksl_irgen` in the crate root

error[E0364]: `parse` is private, and cannot be re-exported
  --> src\ksl_compiler.rs:38:21
   |
38 |     pub use super::{parse, AstNode, ExprKind, TypeAnnotation};
   |                     ^^^^^
   |
note: consider marking `parse` as `pub` in the imported module
  --> src\ksl_compiler.rs:38:21
   |
38 |     pub use super::{parse, AstNode, ExprKind, TypeAnnotation};
   |                     ^^^^^

error[E0365]: `AstNode` is private, and cannot be re-exported
  --> src\ksl_compiler.rs:38:28
   |
38 |     pub use super::{parse, AstNode, ExprKind, TypeAnnotation};
   |                            ^^^^^^^ re-export of private `AstNode`
   |
   = note: consider declaring type or module `AstNode` with `pub`

error[E0365]: `Type` is private, and cannot be re-exported
  --> src\ksl_compiler.rs:42:21
   |
42 |     pub use super::{Type, TypeContext, TypeSystem};
   |                     ^^^^ re-export of private `Type`
   |
   = note: consider declaring type or module `Type` with `pub`

error[E0365]: `TypeContext` is private, and cannot be re-exported
  --> src\ksl_compiler.rs:42:27
   |
42 |     pub use super::{Type, TypeContext, TypeSystem};
   |                           ^^^^^^^^^^^ re-export of private `TypeContext`
   |
   = note: consider declaring type or module `TypeContext` with `pub`

error[E0364]: `TypeSystem` is private, and cannot be re-exported
  --> src\ksl_compiler.rs:42:40
   |
42 |     pub use super::{Type, TypeContext, TypeSystem};
   |                                        ^^^^^^^^^^
   |
note: consider marking `TypeSystem` as `pub` in the imported module
  --> src\ksl_compiler.rs:42:40
   |
42 |     pub use super::{Type, TypeContext, TypeSystem};
   |                                        ^^^^^^^^^^

error[E0365]: `CryptoStdLib` is private, and cannot be re-exported
  --> src\ksl_compiler.rs:54:13
   |
54 |     pub use super::CryptoStdLib;
   |             ^^^^^^^^^^^^^^^^^^^ re-export of private `CryptoStdLib`
   |
   = note: consider declaring type or module `CryptoStdLib` with `pub`

error[E0432]: unresolved import `crate::ksl_export`
  --> src\ksl_compiler.rs:34:12
   |
34 | use crate::ksl_export::export_ir_to_json;
   |            ^^^^^^^^^^ could not find `ksl_export` in the crate root

error[E0432]: unresolved import `toml`
 --> src\ksl_scaffold.rs:5:5
  |
5 | use toml;
  |     ^^^^ no external crate `toml`

error[E0432]: unresolved import `reqwest`
 --> src\ksl_scaffold.rs:6:5
  |
6 | use reqwest;
  |     ^^^^^^^ no external crate `reqwest`

error[E0432]: unresolved import `handlebars`
 --> src\ksl_scaffold.rs:7:5
  |
7 | use handlebars::Handlebars;
  |     ^^^^^^^^^^ use of unresolved module or unlinked crate `handlebars`
  |
  = help: if you wanted to use a crate named `handlebars`, use `cargo add handlebars` to add it to your `Cargo.toml`

error[E0432]: unresolved import `semver`
 --> src\ksl_scaffold.rs:9:5
  |
9 | use semver::{Version, VersionReq};
  |     ^^^^^^ use of unresolved module or unlinked crate `semver`
  |
  = help: if you wanted to use a crate named `semver`, use `cargo add semver` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `ignore`
  --> src\ksl_scaffold.rs:11:5
   |
11 | use ignore::{WalkBuilder, gitignore::Gitignore};
   |     ^^^^^^ use of unresolved module or unlinked crate `ignore`
   |
   = help: if you wanted to use a crate named `ignore`, use `cargo add ignore` to add it to your `Cargo.toml`

error[E0432]: unresolved import `ignore`
  --> src\ksl_scaffold.rs:11:5
   |
11 | use ignore::{WalkBuilder, gitignore::Gitignore};
   |     ^^^^^^ use of unresolved module or unlinked crate `ignore`
   |
   = help: if you wanted to use a crate named `ignore`, use `cargo add ignore` to add it to your `Cargo.toml`

error[E0432]: unresolved import `dirs`
  --> src\ksl_scaffold.rs:12:5
   |
12 | use dirs::cache_dir;
   |     ^^^^ use of unresolved module or unlinked crate `dirs`
   |
   = help: if you wanted to use a crate named `dirs`, use `cargo add dirs` to add it to your `Cargo.toml`

error[E0603]: enum `ExprKind` is private
   --> src\ksl_checker.rs:5:34
    |
5   | use crate::ksl_parser::{AstNode, ExprKind};
    |                                  ^^^^^^^^ private enum
    |
note: the enum `ExprKind` is defined here
   --> src\ksl_parser.rs:156:1
    |
156 | enum ExprKind {
    | ^^^^^^^^^^^^^

error[E0603]: enum `ExprKind` is private
   --> src\ksl_compiler.rs:4:41
    |
4   | use crate::ksl_parser::{parse, AstNode, ExprKind, TypeAnnotation};
    |                                         ^^^^^^^^ private enum
    |
note: the enum `ExprKind` is defined here
   --> src\ksl_parser.rs:156:1
    |
156 | enum ExprKind {
    | ^^^^^^^^^^^^^

error[E0603]: enum `TypeAnnotation` is private
   --> src\ksl_compiler.rs:4:51
    |
4   | use crate::ksl_parser::{parse, AstNode, ExprKind, TypeAnnotation};
    |                                                   ^^^^^^^^^^^^^^ private enum
    |
note: the enum `TypeAnnotation` is defined here
   --> src\ksl_parser.rs:142:1
    |
142 | enum TypeAnnotation {
    | ^^^^^^^^^^^^^^^^^^^

error[E0603]: enum `ExprKind` is private
   --> src\ksl_lsp.rs:6:41
    |
6   | use crate::ksl_parser::{parse, AstNode, ExprKind, ParseError};
    |                                         ^^^^^^^^ private enum
    |
note: the enum `ExprKind` is defined here
   --> src\ksl_parser.rs:156:1
    |
156 | enum ExprKind {
    | ^^^^^^^^^^^^^

warning: unused import: `std::collections::VecDeque`
 --> src\ksl_parser.rs:6:5
  |
6 | use std::collections::VecDeque;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `AstNode`
 --> src\ksl_checker.rs:5:25
  |
5 | use crate::ksl_parser::{AstNode, ExprKind};
  |                         ^^^^^^^

warning: unused imports: `TypeContext`, `TypeError`, `TypeSystem`, and `Type`
    --> src\ksl_checker.rs:1077:21
     |
1077 |     pub use super::{Type, TypeContext, TypeError, TypeSystem};
     |                     ^^^^  ^^^^^^^^^^^  ^^^^^^^^^  ^^^^^^^^^^

warning: unused imports: `AstNode` and `ExprKind`
    --> src\ksl_checker.rs:1081:21
     |
1081 |     pub use super::{AstNode, ExprKind};
     |                     ^^^^^^^  ^^^^^^^^

warning: unused import: `DIScope`
  --> src\ksl_compiler.rs:24:60
   |
24 | use inkwell::debug_info::{DebugInfoBuilder, DICompileUnit, DIScope};
   |                                                            ^^^^^^^

warning: unused imports: `info` and `warn`
  --> src\ksl_compiler.rs:26:18
   |
26 | use log::{debug, info, warn};
   |                  ^^^^  ^^^^

warning: unused import: `std::process::Command`
  --> src\ksl_compiler.rs:28:5
   |
28 | use std::process::Command;
   |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `tempfile::TempDir`
  --> src\ksl_compiler.rs:29:5
   |
29 | use tempfile::TempDir;
   |     ^^^^^^^^^^^^^^^^^

warning: unused imports: `File` and `self`
  --> src\ksl_compiler.rs:30:15
   |
30 | use std::fs::{self, File};
   |               ^^^^  ^^^^

warning: unused import: `std::io::Write`
  --> src\ksl_compiler.rs:31:5
   |
31 | use std::io::Write;
   |     ^^^^^^^^^^^^^^

warning: unused import: `inkwell::OptimizationLevel`
  --> src\ksl_llvm.rs:12:5
   |
12 | use inkwell::OptimizationLevel;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `info` and `warn`
  --> src\ksl_llvm.rs:14:18
   |
14 | use log::{debug, info, warn};
   |                  ^^^^  ^^^^

warning: unused import: `File`
 --> src\ksl_scaffold.rs:1:21
  |
1 | use std::fs::{self, File};
  |                     ^^^^

warning: unused imports: `Read` and `Write`
 --> src\ksl_scaffold.rs:2:21
  |
2 | use std::io::{self, Read, Write};
  |                     ^^^^  ^^^^^

warning: unused import: `Path`
 --> src\scaffold_lint.rs:1:17
  |
1 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `Template`
 --> src\scaffold_lint.rs:4:27
  |
4 | use crate::ksl_scaffold::{Template, TemplateMetadata};
  |                           ^^^^^^^^

warning: unused import: `crate::ksl_types::*`
 --> src\ksl_smart_account.rs:1:5
  |
1 | use crate::ksl_types::*;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::ksl_types::Type`
 --> src\ksl_ir.rs:7:5
  |
7 | use crate::ksl_types::Type;
  |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::PathBuf`
  --> src\ksl_lsp.rs:16:5
   |
16 | use std::path::PathBuf;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused imports: `KSLFunctionIR`, `KSLGlobalIR`, and `KSLIR`
  --> src\ksl_lsp.rs:20:21
   |
20 | use crate::ksl_ir::{KSLIR, KSLFunctionIR, KSLGlobalIR};
   |                     ^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused imports: `AstNode`, `ParseError`, and `parse`
   --> src\ksl_lsp.rs:668:21
    |
668 |     pub use super::{parse, AstNode, ExprKind, ParseError};
    |                     ^^^^^  ^^^^^^^            ^^^^^^^^^^

warning: unused imports: `KslError` and `SourcePosition`
   --> src\ksl_lsp.rs:680:21
    |
680 |     pub use super::{KslError, SourcePosition};
    |                     ^^^^^^^^  ^^^^^^^^^^^^^^

warning: unused import: `AnalyzerConfig`
   --> src\ksl_lsp.rs:684:47
    |
684 |     pub use super::{Analyzer, AnalysisResult, AnalyzerConfig};
    |                                               ^^^^^^^^^^^^^^

warning: unused imports: `BlockHeader` and `ValidatorInfo`
   --> src\ksl_stdlib_crypto.rs:373:28
    |
373 |     use crate::ksl_types::{BlockHeader, Transaction, ValidatorInfo};
    |                            ^^^^^^^^^^^               ^^^^^^^^^^^^^

warning: unused imports: `HashMap` and `HashSet`
   --> src\ksl_stdlib_crypto.rs:375:28
    |
375 |     use std::collections::{HashSet, HashMap};
    |                            ^^^^^^^  ^^^^^^^

warning: unused imports: `TypeError` and `Type`
   --> src\ksl_stdlib_crypto.rs:739:21
    |
739 |     pub use super::{Type, TypeError};
    |                     ^^^^  ^^^^^^^^^

warning: unused imports: `KslError` and `SourcePosition`
   --> src\ksl_stdlib_crypto.rs:747:21
    |
747 |     pub use super::{KslError, SourcePosition};
    |                     ^^^^^^^^  ^^^^^^^^^^^^^^

warning: unused imports: `BlockHeader`, `Transaction`, and `ValidatorInfo`
  --> src\ksl_syscalls.rs:10:24
   |
10 | use crate::ksl_types::{BlockHeader, Transaction, ValidatorInfo};
   |                        ^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^^^^^

warning: unused import: `crate::ksl_errors::KslError`
  --> src\ksl_syscalls.rs:11:5
   |
11 | use crate::ksl_errors::KslError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ValidatorInfo` and `ValidatorStatus`
 --> src\ksl_validator_contract.rs:1:50
  |
1 | use crate::ksl_types::{BlockHeader, Transaction, ValidatorInfo, ValidatorStatus};
  |                                                  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^

warning: unused imports: `compute_merkle_root`, `modulo_check`, and `sha3`
 --> src\ksl_validator_contract.rs:2:72
  |
2 | ...aprekar_valid, bls_verify, modulo_check, sha3, merkle_verify, compute_merkle_root, CrossShardProof, verify_cr...
  |                               ^^^^^^^^^^^^  ^^^^                 ^^^^^^^^^^^^^^^^^^^

warning: ambiguous glob re-exports
  --> src\lib.rs:21:9
   |
21 | pub use ksl_parser::*;
   |         ^^^^^^^^^^^^^ the name `AstNode` in the type namespace is first re-exported here
22 | pub use ksl_checker::*;
   |         -------------- but the name `AstNode` in the type namespace is also re-exported here
   |
   = note: `#[warn(ambiguous_glob_reexports)]` on by default

warning: ambiguous glob re-exports
  --> src\lib.rs:23:9
   |
23 | pub use ksl_compiler::*;
   |         ^^^^^^^^^^^^^^^ the name `LLVMCodegen` in the type namespace is first re-exported here
24 | pub use ksl_llvm::*;
   |         ----------- but the name `LLVMCodegen` in the type namespace is also re-exported here

error[E0596]: cannot borrow `cache` as mutable, as it is not declared as mutable
   --> src\ksl_scaffold.rs:698:13
    |
698 |             cache.update(template.name.clone(), template, content);
    |             ^^^^^ cannot borrow as mutable
    |
help: consider changing this to be mutable
    |
686 |         let mut cache = TemplateCache::new()
    |             +++

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:196:28
    |
196 |             .ok_or_else(|| KslError::type_error("Missing request ID".to_string(), pos))?;
    |                            ^^^^^^^^^^^^^^^^^^^^--------------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
196 -             .ok_or_else(|| KslError::type_error("Missing request ID".to_string(), pos))?;
196 +             .ok_or_else(|| KslError::type_error("Missing request ID".to_string(), pos, /* std::string::String */))?;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:199:28
    |
199 |             .ok_or_else(|| KslError::type_error("Missing or invalid method".to_string(), pos))?;
    |                            ^^^^^^^^^^^^^^^^^^^^---------------------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
199 -             .ok_or_else(|| KslError::type_error("Missing or invalid method".to_string(), pos))?;
199 +             .ok_or_else(|| KslError::type_error("Missing or invalid method".to_string(), pos, /* std::string::String */))?;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:232:36
    |
232 |                     .ok_or_else(|| KslError::type_error("Missing URI".to_string(), pos))?;
    |                                    ^^^^^^^^^^^^^^^^^^^^-------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
232 -                     .ok_or_else(|| KslError::type_error("Missing URI".to_string(), pos))?;
232 +                     .ok_or_else(|| KslError::type_error("Missing URI".to_string(), pos, /* std::string::String */))?;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:236:36
    |
236 |                     .ok_or_else(|| KslError::type_error("Missing text".to_string(), pos))?;
    |                                    ^^^^^^^^^^^^^^^^^^^^--------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
236 -                     .ok_or_else(|| KslError::type_error("Missing text".to_string(), pos))?;
236 +                     .ok_or_else(|| KslError::type_error("Missing text".to_string(), pos, /* std::string::String */))?;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:261:36
    |
261 |                     .ok_or_else(|| KslError::type_error("Missing URI".to_string(), pos))?;
    |                                    ^^^^^^^^^^^^^^^^^^^^-------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
261 -                     .ok_or_else(|| KslError::type_error("Missing URI".to_string(), pos))?;
261 +                     .ok_or_else(|| KslError::type_error("Missing URI".to_string(), pos, /* std::string::String */))?;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:263:36
    |
263 |                     .ok_or_else(|| KslError::type_error(format!("Document not found: {}", uri), pos))?;
    |                                    ^^^^^^^^^^^^^^^^^^^^--------------------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
263 -                     .ok_or_else(|| KslError::type_error(format!("Document not found: {}", uri), pos))?;
263 +                     .ok_or_else(|| KslError::type_error(format!("Document not found: {}", uri), pos, /* std::string::String */))?;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:275:36
    |
275 |                     .ok_or_else(|| KslError::type_error("Missing URI".to_string(), pos))?;
    |                                    ^^^^^^^^^^^^^^^^^^^^-------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
275 -                     .ok_or_else(|| KslError::type_error("Missing URI".to_string(), pos))?;
275 +                     .ok_or_else(|| KslError::type_error("Missing URI".to_string(), pos, /* std::string::String */))?;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:277:36
    |
277 |                     .ok_or_else(|| KslError::type_error("Missing position".to_string(), pos))?;
    |                                    ^^^^^^^^^^^^^^^^^^^^------------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
277 -                     .ok_or_else(|| KslError::type_error("Missing position".to_string(), pos))?;
277 +                     .ok_or_else(|| KslError::type_error("Missing position".to_string(), pos, /* std::string::String */))?;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:280:36
    |
280 |                     .ok_or_else(|| KslError::type_error("Invalid line".to_string(), pos))? as usize;
    |                                    ^^^^^^^^^^^^^^^^^^^^--------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
280 -                     .ok_or_else(|| KslError::type_error("Invalid line".to_string(), pos))? as usize;
280 +                     .ok_or_else(|| KslError::type_error("Invalid line".to_string(), pos, /* std::string::String */))? as usize;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:283:36
    |
283 |                     .ok_or_else(|| KslError::type_error("Invalid character".to_string(), pos))? as usize;
    |                                    ^^^^^^^^^^^^^^^^^^^^-------------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
283 -                     .ok_or_else(|| KslError::type_error("Invalid character".to_string(), pos))? as usize;
283 +                     .ok_or_else(|| KslError::type_error("Invalid character".to_string(), pos, /* std::string::String */))? as usize;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:285:36
    |
285 |                     .ok_or_else(|| KslError::type_error(format!("Document not found: {}", uri), pos))?;
    |                                    ^^^^^^^^^^^^^^^^^^^^--------------------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
285 -                     .ok_or_else(|| KslError::type_error(format!("Document not found: {}", uri), pos))?;
285 +                     .ok_or_else(|| KslError::type_error(format!("Document not found: {}", uri), pos, /* std::string::String */))?;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:297:36
    |
297 |                     .ok_or_else(|| KslError::type_error("Missing URI".to_string(), pos))?;
    |                                    ^^^^^^^^^^^^^^^^^^^^-------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
297 -                     .ok_or_else(|| KslError::type_error("Missing URI".to_string(), pos))?;
297 +                     .ok_or_else(|| KslError::type_error("Missing URI".to_string(), pos, /* std::string::String */))?;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:299:36
    |
299 |                     .ok_or_else(|| KslError::type_error("Missing position".to_string(), pos))?;
    |                                    ^^^^^^^^^^^^^^^^^^^^------------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
299 -                     .ok_or_else(|| KslError::type_error("Missing position".to_string(), pos))?;
299 +                     .ok_or_else(|| KslError::type_error("Missing position".to_string(), pos, /* std::string::String */))?;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:302:36
    |
302 |                     .ok_or_else(|| KslError::type_error("Invalid line".to_string(), pos))? as usize;
    |                                    ^^^^^^^^^^^^^^^^^^^^--------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
302 -                     .ok_or_else(|| KslError::type_error("Invalid line".to_string(), pos))? as usize;
302 +                     .ok_or_else(|| KslError::type_error("Invalid line".to_string(), pos, /* std::string::String */))? as usize;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:305:36
    |
305 |                     .ok_or_else(|| KslError::type_error("Invalid character".to_string(), pos))? as usize;
    |                                    ^^^^^^^^^^^^^^^^^^^^-------------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
305 -                     .ok_or_else(|| KslError::type_error("Invalid character".to_string(), pos))? as usize;
305 +                     .ok_or_else(|| KslError::type_error("Invalid character".to_string(), pos, /* std::string::String */))? as usize;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:307:36
    |
307 |                     .ok_or_else(|| KslError::type_error(format!("Document not found: {}", uri), pos))?;
    |                                    ^^^^^^^^^^^^^^^^^^^^--------------------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
307 -                     .ok_or_else(|| KslError::type_error(format!("Document not found: {}", uri), pos))?;
307 +                     .ok_or_else(|| KslError::type_error(format!("Document not found: {}", uri), pos, /* std::string::String */))?;
    |

error[E0592]: duplicate definitions with name `validate_capabilities`
   --> src\ksl_ir.rs:892:5
    |
600 |     pub fn validate_capabilities(&self, required: &[String]) -> Result<(), String> {
    |     ------------------------------------------------------------------------------ other definition for `validate_capabilities`
...
892 |     pub fn validate_capabilities(&self, required: &[String]) -> Result<(), String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `validate_capabilities`

error[E0277]: the trait bound `ksl_parser::AstNode: Clone` is not satisfied
   --> src\ksl_parser.rs:217:5
    |
215 | #[derive(Debug, PartialEq, Clone)]
    |                            ----- in this derive macro expansion
216 | struct MatchArm {
217 |     pattern: AstNode,
    |     ^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `ksl_parser::AstNode`
    |
    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ksl_parser::AstNode: Clone` is not satisfied
   --> src\ksl_parser.rs:218:5
    |
215 | #[derive(Debug, PartialEq, Clone)]
    |                            ----- in this derive macro expansion
...
218 |     body: Vec<AstNode>,
    |     ^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `ksl_parser::AstNode`
    |
    = note: required for `Vec<ksl_parser::AstNode>` to implement `Clone`
    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `clone` found for enum `ksl_parser::AstNode` in the current scope
   --> src\ksl_parser.rs:224:35
    |
50  | pub enum AstNode {
    | ---------------- method `clone` not found for this enum
...
224 |             pattern: self.pattern.clone(),
    |                                   ^^^^^ method not found in `AstNode`
    |
note: the method `clone` exists on the type `std::string::String`
   --> /rustc/05f9846f893b09a1be1fc8560e33fc3c815cfecb\library\core\src\clone.rs:165:5
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `clone`, perhaps you need to implement it:
            candidate #1: `Clone`

error[E0599]: the method `clone` exists for struct `Vec<TypeError>`, but its trait bounds were not satisfied
   --> src\ksl_checker.rs:134:29
    |
134 |             Err(self.errors.clone())
    |                             ^^^^^ method cannot be called on `Vec<TypeError>` due to unsatisfied trait bounds
    |
   ::: src\ksl_types.rs:143:1
    |
143 | pub struct TypeError {
    | -------------------- doesn't satisfy `TypeError: Clone`
    |
    = note: the following trait bounds were not satisfied:
            `TypeError: Clone`
            which is required by `Vec<TypeError>: Clone`
help: consider annotating `TypeError` with `#[derive(Clone)]`
   --> src\ksl_types.rs:143:1
    |
143 + #[derive(Clone)]
144 | pub struct TypeError {
    |

error[E0308]: mismatched types
   --> src\ksl_checker.rs:189:54
    |
189 |         let expr_type = match TypeSystem::infer_type(expr, &self.ctx, position) {
    |                               ---------------------- ^^^^ expected `ksl_types::AstNode`, found `ksl_checker::AstNode`
    |                               |
    |                               arguments to this function are incorrect
    |
    = note: `ksl_checker::AstNode` and `ksl_types::AstNode` have similar names, but are actually distinct types
note: `ksl_checker::AstNode` is defined in module `crate::ksl_checker` of the current crate
   --> src\ksl_checker.rs:42:1
    |
42  | pub enum AstNode {
    | ^^^^^^^^^^^^^^^^
note: `ksl_types::AstNode` is defined in module `crate::ksl_types` of the current crate
   --> src\ksl_types.rs:473:1
    |
473 | pub enum AstNode {
    | ^^^^^^^^^^^^^^^^
note: associated function defined here
   --> src\ksl_types.rs:275:12
    |
275 |     pub fn infer_type(
    |            ^^^^^^^^^^
276 |         node: &AstNode,
    |         --------------

error[E0599]: no method named `clone` found for struct `TypeContext` in the current scope
   --> src\ksl_checker.rs:265:32
    |
265 |         let old_ctx = self.ctx.clone();
    |                                ^^^^^ method not found in `TypeContext`
    |
   ::: src\ksl_types.rs:98:1
    |
98  | pub struct TypeContext {
    | ---------------------- method `clone` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `clone`, perhaps you need to implement it:
            candidate #1: `Clone`

error[E0308]: mismatched types
   --> src\ksl_checker.rs:299:58
    |
299 |             let last_type = match TypeSystem::infer_type(last_node, &self.ctx, position) {
    |                                   ---------------------- ^^^^^^^^^ expected `ksl_types::AstNode`, found `ksl_checker::AstNode`
    |                                   |
    |                                   arguments to this function are incorrect
    |
    = note: `ksl_checker::AstNode` and `ksl_types::AstNode` have similar names, but are actually distinct types
note: `ksl_checker::AstNode` is defined in module `crate::ksl_checker` of the current crate
   --> src\ksl_checker.rs:42:1
    |
42  | pub enum AstNode {
    | ^^^^^^^^^^^^^^^^
note: `ksl_types::AstNode` is defined in module `crate::ksl_types` of the current crate
   --> src\ksl_types.rs:473:1
    |
473 | pub enum AstNode {
    | ^^^^^^^^^^^^^^^^
note: associated function defined here
   --> src\ksl_types.rs:275:12
    |
275 |     pub fn infer_type(
    |            ^^^^^^^^^^
276 |         node: &AstNode,
    |         --------------

error[E0599]: no method named `clone` found for struct `TypeContext` in the current scope
   --> src\ksl_checker.rs:338:32
    |
338 |         let old_ctx = self.ctx.clone();
    |                                ^^^^^ method not found in `TypeContext`
    |
   ::: src\ksl_types.rs:98:1
    |
98  | pub struct TypeContext {
    | ---------------------- method `clone` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `clone`, perhaps you need to implement it:
            candidate #1: `Clone`

error[E0308]: mismatched types
   --> src\ksl_checker.rs:381:54
    |
381 |         let cond_type = match TypeSystem::infer_type(condition, &self.ctx, position) {
    |                               ---------------------- ^^^^^^^^^ expected `ksl_types::AstNode`, found `ksl_checker::AstNode`
    |                               |
    |                               arguments to this function are incorrect
    |
    = note: `ksl_checker::AstNode` and `ksl_types::AstNode` have similar names, but are actually distinct types
note: `ksl_checker::AstNode` is defined in module `crate::ksl_checker` of the current crate
   --> src\ksl_checker.rs:42:1
    |
42  | pub enum AstNode {
    | ^^^^^^^^^^^^^^^^
note: `ksl_types::AstNode` is defined in module `crate::ksl_types` of the current crate
   --> src\ksl_types.rs:473:1
    |
473 | pub enum AstNode {
    | ^^^^^^^^^^^^^^^^
note: associated function defined here
   --> src\ksl_types.rs:275:12
    |
275 |     pub fn infer_type(
    |            ^^^^^^^^^^
276 |         node: &AstNode,
    |         --------------

error[E0308]: mismatched types
   --> src\ksl_checker.rs:411:54
    |
411 |         let expr_type = match TypeSystem::infer_type(expr, &self.ctx, position) {
    |                               ---------------------- ^^^^ expected `ksl_types::AstNode`, found `ksl_checker::AstNode`
    |                               |
    |                               arguments to this function are incorrect
    |
    = note: `ksl_checker::AstNode` and `ksl_types::AstNode` have similar names, but are actually distinct types
note: `ksl_checker::AstNode` is defined in module `crate::ksl_checker` of the current crate
   --> src\ksl_checker.rs:42:1
    |
42  | pub enum AstNode {
    | ^^^^^^^^^^^^^^^^
note: `ksl_types::AstNode` is defined in module `crate::ksl_types` of the current crate
   --> src\ksl_types.rs:473:1
    |
473 | pub enum AstNode {
    | ^^^^^^^^^^^^^^^^
note: associated function defined here
   --> src\ksl_types.rs:275:12
    |
275 |     pub fn infer_type(
    |            ^^^^^^^^^^
276 |         node: &AstNode,
    |         --------------

error[E0308]: mismatched types
   --> src\ksl_checker.rs:422:61
    |
422 |             let pattern_type = match TypeSystem::infer_type(pattern, &self.ctx, position) {
    |                                      ---------------------- ^^^^^^^ expected `ksl_types::AstNode`, found `ksl_checker::AstNode`
    |                                      |
    |                                      arguments to this function are incorrect
    |
    = note: `ksl_checker::AstNode` and `ksl_types::AstNode` have similar names, but are actually distinct types
note: `ksl_checker::AstNode` is defined in module `crate::ksl_checker` of the current crate
   --> src\ksl_checker.rs:42:1
    |
42  | pub enum AstNode {
    | ^^^^^^^^^^^^^^^^
note: `ksl_types::AstNode` is defined in module `crate::ksl_types` of the current crate
   --> src\ksl_types.rs:473:1
    |
473 | pub enum AstNode {
    | ^^^^^^^^^^^^^^^^
note: associated function defined here
   --> src\ksl_types.rs:275:12
    |
275 |     pub fn infer_type(
    |            ^^^^^^^^^^
276 |         node: &AstNode,
    |         --------------

error[E0308]: mismatched types
   --> src\ksl_checker.rs:471:69
    |
471 |                         let arg_type = match TypeSystem::infer_type(arg, &self.ctx, position) {
    |                                              ---------------------- ^^^ expected `ksl_types::AstNode`, found `ksl_checker::AstNode`
    |                                              |
    |                                              arguments to this function are incorrect
    |
    = note: `ksl_checker::AstNode` and `ksl_types::AstNode` have similar names, but are actually distinct types
note: `ksl_checker::AstNode` is defined in module `crate::ksl_checker` of the current crate
   --> src\ksl_checker.rs:42:1
    |
42  | pub enum AstNode {
    | ^^^^^^^^^^^^^^^^
note: `ksl_types::AstNode` is defined in module `crate::ksl_types` of the current crate
   --> src\ksl_types.rs:473:1
    |
473 | pub enum AstNode {
    | ^^^^^^^^^^^^^^^^
note: associated function defined here
   --> src\ksl_types.rs:275:12
    |
275 |     pub fn infer_type(
    |            ^^^^^^^^^^
276 |         node: &AstNode,
    |         --------------

error[E0308]: mismatched types
   --> src\ksl_checker.rs:515:69
    |
515 |                         let arg_type = match TypeSystem::infer_type(arg, &self.ctx, position) {
    |                                              ---------------------- ^^^ expected `ksl_types::AstNode`, found `ksl_checker::AstNode`
    |                                              |
    |                                              arguments to this function are incorrect
    |
    = note: `ksl_checker::AstNode` and `ksl_types::AstNode` have similar names, but are actually distinct types
note: `ksl_checker::AstNode` is defined in module `crate::ksl_checker` of the current crate
   --> src\ksl_checker.rs:42:1
    |
42  | pub enum AstNode {
    | ^^^^^^^^^^^^^^^^
note: `ksl_types::AstNode` is defined in module `crate::ksl_types` of the current crate
   --> src\ksl_types.rs:473:1
    |
473 | pub enum AstNode {
    | ^^^^^^^^^^^^^^^^
note: associated function defined here
   --> src\ksl_types.rs:275:12
    |
275 |     pub fn infer_type(
    |            ^^^^^^^^^^
276 |         node: &AstNode,
    |         --------------

error[E0308]: mismatched types
   --> src\ksl_checker.rs:541:81
    |
541 | ...type(&AstNode::Expr { kind: kind.clone() }, &self.ctx, position) {
    |                                ^^^^^^^^^^^^ expected `ExprKind`, found `&ExprKind`
    |
note: `ksl_checker::ExprKind` does not implement `Clone`, so `&ksl_checker::ExprKind` was cloned instead
   --> src\ksl_checker.rs:541:81
    |
541 | ...   if let Err(err) = TypeSystem::infer_type(&AstNode::Expr { kind: kind.clone() }, &self.ctx, position) {
    |                                                                       ^^^^
help: consider annotating `ksl_checker::ExprKind` with `#[derive(Clone)]`
    |
76  + #[derive(Clone)]
77  | pub enum ExprKind {
    |

error[E0308]: mismatched types
   --> src\ksl_checker.rs:541:58
    |
541 | ... if let Err(err) = TypeSystem::infer_type(&AstNode::Expr { kind: kind.clone() }, &self.ctx, position) {
    |                       ---------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `ksl_types::AstNode`, found `ksl_checker::AstNode`
    |                       |
    |                       arguments to this function are incorrect
    |
    = note: `ksl_checker::AstNode` and `ksl_types::AstNode` have similar names, but are actually distinct types
note: `ksl_checker::AstNode` is defined in module `crate::ksl_checker` of the current crate
   --> src\ksl_checker.rs:42:1
    |
42  | pub enum AstNode {
    | ^^^^^^^^^^^^^^^^
note: `ksl_types::AstNode` is defined in module `crate::ksl_types` of the current crate
   --> src\ksl_types.rs:473:1
    |
473 | pub enum AstNode {
    | ^^^^^^^^^^^^^^^^
note: associated function defined here
   --> src\ksl_types.rs:275:12
    |
275 |     pub fn infer_type(
    |            ^^^^^^^^^^
276 |         node: &AstNode,
    |         --------------

error[E0599]: no variant or associated item named `Simple` found for enum `ksl_types::Type` in the current scope
   --> src\ksl_checker.rs:553:76
    |
553 |                     "f32" | "f64" | "bool" | "string" | "void" => Ok(Type::Simple(name.clone())),
    |                                                                            ^^^^^^ variant or associated item not found in `Type`
    |
   ::: src\ksl_types.rs:38:1
    |
38  | pub enum Type {
    | ------------- variant or associated item `Simple` not found for this enum

error[E0599]: no variant or associated item named `Simple` found for enum `ksl_types::Type` in the current scope
   --> src\ksl_checker.rs:574:27
    |
574 | ...   Type::Simple(ref name) if matches!(name.as_str(), "u8" | "u16" | "u32" | "u64" | "i8" | "i16" | "i32" | ...
    |             ^^^^^^ variant or associated item not found in `Type`
    |
   ::: src\ksl_types.rs:38:1
    |
38  | pub enum Type {
    | ------------- variant or associated item `Simple` not found for this enum

error[E0277]: the `?` operator can only be applied to values that implement `Try`
   --> src\ksl_checker.rs:596:26
    |
596 |         let array_type = self.check_node(array, position)?;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `()`
    |
    = help: the trait `Try` is not implemented for `()`

error[E0277]: the `?` operator can only be applied to values that implement `Try`
   --> src\ksl_checker.rs:599:26
    |
599 |         let index_type = self.check_node(index, position)?;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `()`
    |
    = help: the trait `Try` is not implemented for `()`

error[E0599]: no variant or associated item named `Simple` found for enum `ksl_types::Type` in the current scope
   --> src\ksl_checker.rs:602:40
    |
602 | ...   if !matches!(index_type, Type::Simple(ref name) if matches!(name.as_str(), "u8" | "u16" | "u32" | "u64" ...
    |                                      ^^^^^^ variant or associated item not found in `Type`
    |
   ::: src\ksl_types.rs:38:1
    |
38  | pub enum Type {
    | ------------- variant or associated item `Simple` not found for this enum

error[E0599]: no method named `unwrap` found for unit type `()` in the current scope
   --> src\ksl_compiler.rs:176:82
    |
176 |                 Target::initialize_webassembly(&InitializationConfig::default()).unwrap();
    |                                                                                  ^^^^^^
    |
help: there is a method `wrap` with a similar name
    |
176 -                 Target::initialize_webassembly(&InitializationConfig::default()).unwrap();
176 +                 Target::initialize_webassembly(&InitializationConfig::default()).wrap();
    |

error[E0061]: this method takes 15 arguments but 16 arguments were supplied
    --> src\ksl_compiler.rs:193:36
     |
193  |             let (dib, cu) = module.create_debug_info_builder(
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
note: method defined here
    --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\inkwell-0.2.0\src\module.rs:1407:12
     |
1407 |     pub fn create_debug_info_builder(
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^
help: did you mean
     |
193  -             let (dib, cu) = module.create_debug_info_builder(
194  -                 true,
195  -                 inkwell::debug_info::DWARFSourceLanguage::C,
196  -                 "ksl",
197  -                 module_name,
198  -                 "",
199  -                 "KSL Compiler",
200  -                 false,
201  -                 "",
202  -                 0,
203  -                 "",
204  -                 inkwell::debug_info::DWARFEmissionKind::Full,
205  -                 0,
206  -                 false,
207  -                 false,
208  -                 "",
209  -                 "",
210  -             );
193  +             let (dib, cu) = module.create_debug_info_builder(true, inkwell::debug_info::DWARFSourceLanguage::C, "ksl", module_name, "", false, "KSL Compiler", 0, "", inkwell::debug_info::DWARFEmissionKind::Full, 0, false, false, "", "");
     |

error[E0599]: no method named `par_iter` found for reference `&[ksl_parser::AstNode]` in the current scope
   --> src\ksl_compiler.rs:285:39
    |
285 |             let results: Vec<_> = ast.par_iter().map(|node| {
    |                                       ^^^^^^^^
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `IntoParallelRefIterator` which provides `par_iter` is implemented but not in scope; perhaps you want to import it
    |
4   + use rayon::iter::IntoParallelRefIterator;
    |
help: there is a method `iter` with a similar name
    |
285 -             let results: Vec<_> = ast.par_iter().map(|node| {
285 +             let results: Vec<_> = ast.iter().map(|node| {
    |

error[E0308]: mismatched types
   --> src\ksl_compiler.rs:296:38
    |
296 |             self.pass_manager.run_on(&self.module);
    |                               ------ ^^^^^^^^^^^^ expected `&FunctionValue<'_>`, found `&Module<'_>`
    |                               |
    |                               arguments to this method are incorrect
    |
    = note: expected reference `&inkwell::values::FunctionValue<'_>`
               found reference `&inkwell::module::Module<'ctx>`
note: method defined here
   --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\inkwell-0.2.0\src\passes.rs:293:12
    |
293 |     pub fn run_on(&self, input: &T) -> bool {
    |            ^^^^^^

error[E0599]: no method named `clone` found for struct `std::sync::MutexGuard<'_, OptimizationFeedback>` in the current scope
   --> src\ksl_compiler.rs:355:39
    |
355 |         self.feedback.lock().unwrap().clone()
    |                                       ^^^^^ method not found in `MutexGuard<'_, OptimizationFeedback>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `clone`, perhaps you need to implement it:
            candidate #1: `Clone`

error[E0599]: no associated item named `Generic` found for struct `AddressSpace` in the current scope
   --> src\ksl_compiler.rs:363:73
    |
363 |         let i8_ptr_type = self.context.i8_type().ptr_type(AddressSpace::Generic);
    |                                                                         ^^^^^^^ associated item not found in `AddressSpace`

error[E0026]: variant `ksl_parser::AstNode::FnDecl` does not have a field named `ret_type`
   --> src\ksl_compiler.rs:385:45
    |
385 |             AstNode::FnDecl { name, params, ret_type, body, .. } => {
    |                                             ^^^^^^^^ variant `ksl_parser::AstNode::FnDecl` does not have this field

error[E0599]: no variant named `AsyncFnDecl` found for enum `ksl_parser::AstNode`
   --> src\ksl_compiler.rs:400:22
    |
400 |             AstNode::AsyncFnDecl { name, params, body, .. } => {
    |                      ^^^^^^^^^^^ variant not found in `ksl_parser::AstNode`
    |
   ::: src\ksl_parser.rs:50:1
    |
50  | pub enum AstNode {
    | ---------------- variant `AsyncFnDecl` not found here

error[E0599]: no method named `const_void` found for struct `inkwell::types::VoidType` in the current scope
   --> src\ksl_compiler.rs:460:45
    |
460 |                 Ok(self.context.void_type().const_void().as_basic_value_enum())
    |                                             ^^^^^^^^^^ method not found in `VoidType<'_>`

error[E0599]: no method named `as_scope` found for reference `&DICompileUnit<'_>` in the current scope
   --> src\ksl_compiler.rs:494:20
    |
494 |                 cu.as_scope(),
    |                    ^^^^^^^^ method not found in `&DICompileUnit<'_>`

error[E0599]: no associated item named `Public` found for type `i32` in the current scope
   --> src\ksl_compiler.rs:499:100
    |
499 |                 dib.create_subroutine_type(cu.get_file(), None, &[], inkwell::debug_info::DIFlags::Public),
    |                                                                                                    ^^^^^^ associated item not found in `i32`

error[E0599]: no associated item named `Prototyped` found for type `i32` in the current scope
   --> src\ksl_compiler.rs:503:47
    |
503 |                 inkwell::debug_info::DIFlags::Prototyped,
    |                                               ^^^^^^^^^^ associated item not found in `i32`

error[E0308]: mismatched types
   --> src\ksl_compiler.rs:519:35
    |
519 |             self.variables.insert(param_name.clone(), alloca);
    |                            ------ ^^^^^^^^^^^-----^^
    |                            |      |          |
    |                            |      |          help: try using a conversion method: `to_string`
    |                            |      expected `String`, found `&str`
    |                            arguments to this method are incorrect
    |
note: method defined here
   --> /rustc/05f9846f893b09a1be1fc8560e33fc3c815cfecb\library\std\src\collections\hash\map.rs:1189:12

error[E0599]: no associated item named `Generic` found for struct `AddressSpace` in the current scope
   --> src\ksl_compiler.rs:553:61
    |
553 |             &[self.context.i8_type().ptr_type(AddressSpace::Generic).into()],
    |                                                             ^^^^^^^ associated item not found in `AddressSpace`

error[E0599]: no method named `generate_pattern` found for mutable reference `&mut ksl_compiler::LLVMCodegen<'ctx>` in the current scope
   --> src\ksl_compiler.rs:661:38
    |
661 |             let pattern_value = self.generate_pattern(&arm.pattern)?;
    |                                      ^^^^^^^^^^^^^^^^
    |
help: there is a method `generate` with a similar name, but with different arguments
   --> src\ksl_compiler.rs:267:5
    |
267 | /     pub fn generate(
268 | |         &mut self,
269 | |         ast: &[AstNode],
270 | |         target: CompileTarget,
271 | |         metrics: &PerformanceMetrics,
272 | |     ) -> Result<(), KslError> {
    | |_____________________________^

error[E0599]: no associated item named `Generic` found for struct `AddressSpace` in the current scope
   --> src\ksl_compiler.rs:828:78
    |
828 |                 "string" => Ok(self.context.i8_type().ptr_type(AddressSpace::Generic).as_basic_type_enum()),
    |                                                                              ^^^^^^^ associated item not found in `AddressSpace`

error[E0061]: this method takes 3 arguments but 4 arguments were supplied
   --> src\ksl_compiler.rs:874:42
    |
874 |         let state_num_ptr = self.builder.build_struct_gep(state_type, state_ptr, 0, "state_num_ptr")?;
    |                                          ^^^^^^^^^^^^^^^^ ---------- unexpected argument #1 of type `BasicTypeEnum<'ctx>`
    |
note: method defined here
   --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\inkwell-0.2.0\src\builder.rs:994:12
    |
994 |     pub fn build_struct_gep(&self, ptr: PointerValue<'ctx>, index: u32, name: &str) -> Result<PointerValue<'ct...
    |            ^^^^^^^^^^^^^^^^
help: remove the extra argument
    |
874 -         let state_num_ptr = self.builder.build_struct_gep(state_type, state_ptr, 0, "state_num_ptr")?;
874 +         let state_num_ptr = self.builder.build_struct_gep(state_ptr, 0, "state_num_ptr")?;
    |

error[E0308]: mismatched types
    --> src\ksl_compiler.rs:878:83
     |
878  |         let switch = self.builder.build_switch(state_num.into_int_value(), entry, body.len() as u32);
     |                                   ------------                                    ^^^^^^^^^^^^^^^^^ expected `&[(IntValue<'_>, BasicBlock<'_>)]`, found `u32`
     |                                   |
     |                                   arguments to this method are incorrect
     |
     = note: expected reference `&[(inkwell::values::IntValue<'_>, inkwell::basic_block::BasicBlock<'_>)]`
                     found type `u32`
note: method defined here
    --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\inkwell-0.2.0\src\builder.rs:2635:12
     |
2635 |     pub fn build_switch(
     |            ^^^^^^^^^^^^

error[E0599]: no method named `add_case` found for struct `inkwell::values::InstructionValue` in the current scope
   --> src\ksl_compiler.rs:883:20
    |
883 |             switch.add_case(self.context.i32_type().const_int(i as u64, false), state_bb);
    |                    ^^^^^^^^ method not found in `InstructionValue<'_>`

error[E0599]: no method named `is_public` found for struct `inkwell::values::FunctionValue` in the current scope
   --> src\ksl_compiler.rs:934:38
    |
934 |             let visibility = if func.is_public() {
    |                                      ^^^^^^^^^
    |
help: there is a method `is_null` with a similar name
    |
934 -             let visibility = if func.is_public() {
934 +             let visibility = if func.is_null() {
    |

error[E0599]: no method named `is_public` found for struct `GlobalValue` in the current scope
   --> src\ksl_compiler.rs:956:40
    |
956 |             let visibility = if global.is_public() {
    |                                        ^^^^^^^^^ method not found in `GlobalValue<'_>`

error[E0599]: no method named `set_global_constant` found for struct `GlobalValue` in the current scope
   --> src\ksl_compiler.rs:989:25
    |
989 |         metadata_global.set_global_constant(true);
    |                         ^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `set_constant` with a similar name
    |
989 -         metadata_global.set_global_constant(true);
989 +         metadata_global.set_constant(true);
    |

error[E0599]: no method named `const_struct` found for struct `inkwell::types::StructType` in the current scope
    --> src\ksl_compiler.rs:1055:46
     |
1055 |         let initializer = runtime_state_type.const_struct(
     |                           -------------------^^^^^^^^^^^^
     |
help: there is a method `const_named_struct` with a similar name, but with different arguments
    --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\inkwell-0.2.0\src\types\struct_type.rs:80:5
     |
80   |     pub fn const_named_struct(self, values: &[BasicValueEnum<'ctx>]) -> StructValue<'ctx> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `const_struct` found for struct `inkwell::types::StructType` in the current scope
    --> src\ksl_compiler.rs:1079:53
     |
1079 |             let initializer = hot_reload_state_type.const_struct(
     |                               ----------------------^^^^^^^^^^^^
     |
help: there is a method `const_named_struct` with a similar name, but with different arguments
    --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\inkwell-0.2.0\src\types\struct_type.rs:80:5
     |
80   |     pub fn const_named_struct(self, values: &[BasicValueEnum<'ctx>]) -> StructValue<'ctx> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_llvm.rs:58:24
    |
58  |               return Err(KslError::type_error(
    |  ________________________^^^^^^^^^^^^^^^^^^^^-
59  | |                 "LLVM module verification failed".to_string(),
60  | |                 SourcePosition::new(1, 1),
61  | |             ));
    | |_____________- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
58  -             return Err(KslError::type_error(
59  -                 "LLVM module verification failed".to_string(),
60  -                 SourcePosition::new(1, 1),
61  -             ));
58  +             return Err(KslError::type_error("LLVM module verification failed".to_string(), SourcePosition::new(1, 1), /* std::string::String */));
    |

error[E0599]: no associated item named `Generic` found for struct `AddressSpace` in the current scope
  --> src\ksl_llvm.rs:73:73
   |
73 |         let i8_ptr_type = self.context.i8_type().ptr_type(AddressSpace::Generic);
   |                                                                         ^^^^^^^ associated item not found in `AddressSpace`

error[E0599]: no method named `const_void` found for struct `inkwell::types::VoidType` in the current scope
   --> src\ksl_llvm.rs:151:45
    |
151 |                 Ok(self.context.void_type().const_void().as_basic_value_enum())
    |                                             ^^^^^^^^^^ method not found in `VoidType<'_>`

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_llvm.rs:153:22
    |
153 |               _ => Err(KslError::type_error(
    |  ______________________^^^^^^^^^^^^^^^^^^^^-
154 | |                 format!("Unsupported AST node: {:?}", node),
155 | |                 SourcePosition::new(1, 1),
156 | |             )),
    | |_____________- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
153 -             _ => Err(KslError::type_error(
154 -                 format!("Unsupported AST node: {:?}", node),
155 -                 SourcePosition::new(1, 1),
156 -             )),
153 +             _ => Err(KslError::type_error(format!("Unsupported AST node: {:?}", node), SourcePosition::new(1, 1), /* std::string::String */)),
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_llvm.rs:196:17
    |
196 |               Err(KslError::type_error(
    |  _________________^^^^^^^^^^^^^^^^^^^^-
197 | |                 format!("Undefined variable: {}", name),
198 | |                 SourcePosition::new(1, 1),
199 | |             ))
    | |_____________- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
196 -             Err(KslError::type_error(
197 -                 format!("Undefined variable: {}", name),
198 -                 SourcePosition::new(1, 1),
199 -             ))
196 +             Err(KslError::type_error(format!("Undefined variable: {}", name), SourcePosition::new(1, 1), /* std::string::String */))
    |

error[E0277]: `BinaryOperator` doesn't implement `std::fmt::Debug`
   --> src\ksl_llvm.rs:241:62
    |
241 |                 format!("Unsupported binary operator: {:?}", op),
    |                                                              ^^ `BinaryOperator` cannot be formatted using `{:?}`
    |
    = help: the trait `std::fmt::Debug` is not implemented for `BinaryOperator`
    = note: add `#[derive(Debug)]` to `BinaryOperator` or manually `impl std::fmt::Debug for BinaryOperator`
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider annotating `BinaryOperator` with `#[derive(Debug)]`
   --> src\ksl_ast.rs:11:1
    |
11  + #[derive(Debug)]
12  | pub enum BinaryOperator {
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_llvm.rs:240:22
    |
240 |               _ => Err(KslError::type_error(
    |  ______________________^^^^^^^^^^^^^^^^^^^^-
241 | |                 format!("Unsupported binary operator: {:?}", op),
242 | |                 SourcePosition::new(1, 1),
243 | |             )),
    | |_____________- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
240 -             _ => Err(KslError::type_error(
241 -                 format!("Unsupported binary operator: {:?}", op),
242 -                 SourcePosition::new(1, 1),
243 -             )),
240 +             _ => Err(KslError::type_error(format!("Unsupported binary operator: {:?}", op), SourcePosition::new(1, 1), /* std::string::String */)),
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_llvm.rs:255:17
    |
255 |                   KslError::type_error(
    |  _________________^^^^^^^^^^^^^^^^^^^^-
256 | |                     format!("Undefined function: {}", name),
257 | |                     SourcePosition::new(1, 1),
258 | |                 )
    | |_________________- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
255 -                 KslError::type_error(
256 -                     format!("Undefined function: {}", name),
257 -                     SourcePosition::new(1, 1),
258 -                 )
255 +                 KslError::type_error(format!("Undefined function: {}", name), SourcePosition::new(1, 1), /* std::string::String */)
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_llvm.rs:260:29
    |
260 |               _ => return Err(KslError::type_error(
    |  _____________________________^^^^^^^^^^^^^^^^^^^^-
261 | |                 "Function call target must be an identifier".to_string(),
262 | |                 SourcePosition::new(1, 1),
263 | |             )),
    | |_____________- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
260 -             _ => return Err(KslError::type_error(
261 -                 "Function call target must be an identifier".to_string(),
262 -                 SourcePosition::new(1, 1),
263 -             )),
260 +             _ => return Err(KslError::type_error("Function call target must be an identifier".to_string(), SourcePosition::new(1, 1), /* std::string::String */)),
    |

error[E0599]: no associated item named `Generic` found for struct `AddressSpace` in the current scope
   --> src\ksl_llvm.rs:331:75
    |
331 |             Type::Str => Ok(self.context.i8_type().ptr_type(AddressSpace::Generic).as_basic_type_enum()),
    |                                                                           ^^^^^^^ associated item not found in `AddressSpace`

error[E0308]: mismatched types
   --> src\ksl_llvm.rs:334:41
    |
334 |                 Ok(elem_type.array_type(*size).as_basic_type_enum())
    |                              ---------- ^^^^^ expected `u32`, found `usize`
    |                              |
    |                              arguments to this method are incorrect
    |
note: method defined here
   --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\inkwell-0.2.0\src\types\traits.rs:111:8
    |
111 |     fn array_type(&self, size: u32) -> ArrayType<'ctx> {
    |        ^^^^^^^^^^
help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit
    |
334 |                 Ok(elem_type.array_type((*size).try_into().unwrap()).as_basic_type_enum())
    |                                         +     +++++++++++++++++++++

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_llvm.rs:336:22
    |
336 |               _ => Err(KslError::type_error(
    |  ______________________^^^^^^^^^^^^^^^^^^^^-
337 | |                 format!("Unsupported type: {:?}", ty),
338 | |                 SourcePosition::new(1, 1),
339 | |             )),
    | |_____________- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
336 -             _ => Err(KslError::type_error(
337 -                 format!("Unsupported type: {:?}", ty),
338 -                 SourcePosition::new(1, 1),
339 -             )),
336 +             _ => Err(KslError::type_error(format!("Unsupported type: {:?}", ty), SourcePosition::new(1, 1), /* std::string::String */)),
    |

error[E0609]: no field `ty` on type `&(std::string::String, ksl_ast::Type)`
   --> src\ksl_llvm.rs:347:56
    |
347 |             .map(|param| self.type_to_llvm_type(&param.ty))
    |                                                        ^^ unknown field

error[E0609]: no field `return_type` on type `&ksl_ast::Function`
   --> src\ksl_llvm.rs:351:51
    |
351 |         let return_type = if let Some(ty) = &func.return_type {
    |                                                   ^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
351 -         let return_type = if let Some(ty) = &func.return_type {
351 +         let return_type = if let Some(ty) = &func.ret_type {
    |

error[E0599]: no method named `as_basic_type_enum` found for struct `inkwell::types::VoidType` in the current scope
   --> src\ksl_llvm.rs:354:38
    |
354 |             self.context.void_type().as_basic_type_enum()
    |                                      ^^^^^^^^^^^^^^^^^^
    |
help: there is a method `as_any_type_enum` with a similar name
    |
354 -             self.context.void_type().as_basic_type_enum()
354 +             self.context.void_type().as_any_type_enum()
    |

error[E0609]: no field `name` on type `&(std::string::String, ksl_ast::Type)`
   --> src\ksl_llvm.rs:371:83
    |
371 |             let alloca = self.builder.build_alloca(param_value.get_type(), &param.name);
    |                                                                                   ^^^^ unknown field

error[E0609]: no field `name` on type `&(std::string::String, ksl_ast::Type)`
   --> src\ksl_llvm.rs:373:41
    |
373 |             self.variables.insert(param.name.clone(), alloca);
    |                                         ^^^^ unknown field

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_llvm.rs:386:28
    |
386 |                   return Err(KslError::type_error(
    |  ____________________________^^^^^^^^^^^^^^^^^^^^-
387 | |                     "Function must return a value".to_string(),
388 | |                     SourcePosition::new(1, 1),
389 | |                 ));
    | |_________________- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
386 -                 return Err(KslError::type_error(
387 -                     "Function must return a value".to_string(),
388 -                     SourcePosition::new(1, 1),
389 -                 ));
386 +                 return Err(KslError::type_error("Function must return a value".to_string(), SourcePosition::new(1, 1), /* std::string::String */));
    |

error[E0599]: no method named `as_bytes` found for struct `LLVMString` in the current scope
   --> src\ksl_llvm.rs:414:64
    |
414 |         version.update_checksum(&self.module.print_to_string().as_bytes());
    |                                                                ^^^^^^^^
    |
help: there is a method `bytes` with a similar name
    |
414 -         version.update_checksum(&self.module.print_to_string().as_bytes());
414 +         version.update_checksum(&self.module.print_to_string().bytes());
    |

error[E0308]: mismatched types
   --> src\ksl_llvm.rs:478:9
    |
478 |     Ok((codegen.module.print_to_string(), abi))
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`
    |         |
    |         expected `String`, found `LLVMString`

error[E0277]: the trait bound `FunctionIR: Serialize` is not satisfied
    --> src\ksl_ir.rs:255:24
     |
255  | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `FunctionIR`
...
268  |     /// Function definitions
     |     ------------------------ required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `FunctionIR` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 258 others
     = note: required for `std::collections::HashMap<std::string::String, FunctionIR>` to implement `Serialize`
note: required by a bound in `ksl_compiler::_::_serde::ser::SerializeStruct::serialize_field`
    --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde-1.0.219\src\ser\mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `GlobalIR: Serialize` is not satisfied
    --> src\ksl_ir.rs:255:24
     |
255  | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `GlobalIR`
...
270  |     /// Global variables
     |     -------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `GlobalIR` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 258 others
     = note: required for `std::collections::HashMap<std::string::String, GlobalIR>` to implement `Serialize`
note: required by a bound in `ksl_compiler::_::_serde::ser::SerializeStruct::serialize_field`
    --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde-1.0.219\src\ser\mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `PluginOpIR: Serialize` is not satisfied
    --> src\ksl_ir.rs:255:24
     |
255  | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `PluginOpIR`
...
272  |     /// Plugin operations
     |     --------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `PluginOpIR` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 258 others
     = note: required for `std::collections::HashMap<std::string::String, PluginOpIR>` to implement `Serialize`
note: required by a bound in `ksl_compiler::_::_serde::ser::SerializeStruct::serialize_field`
    --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde-1.0.219\src\ser\mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `FunctionIR: Deserialize<'_>` is not satisfied
    --> src\ksl_ir.rs:269:20
     |
269  |     pub functions: HashMap<String, FunctionIR>,
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `FunctionIR`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `FunctionIR` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 295 others
     = note: required for `std::collections::HashMap<std::string::String, FunctionIR>` to implement `Deserialize<'_>`
note: required by a bound in `next_element`
    --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde-1.0.219\src\de\mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `GlobalIR: Deserialize<'_>` is not satisfied
    --> src\ksl_ir.rs:271:18
     |
271  |     pub globals: HashMap<String, GlobalIR>,
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `GlobalIR`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `GlobalIR` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 295 others
     = note: required for `std::collections::HashMap<std::string::String, GlobalIR>` to implement `Deserialize<'_>`
note: required by a bound in `next_element`
    --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde-1.0.219\src\de\mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `PluginOpIR: Deserialize<'_>` is not satisfied
    --> src\ksl_ir.rs:273:21
     |
273  |     pub plugin_ops: HashMap<String, PluginOpIR>,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `PluginOpIR`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `PluginOpIR` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 295 others
     = note: required for `std::collections::HashMap<std::string::String, PluginOpIR>` to implement `Deserialize<'_>`
note: required by a bound in `next_element`
    --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde-1.0.219\src\de\mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `FunctionIR: Deserialize<'_>` is not satisfied
    --> src\ksl_ir.rs:269:20
     |
269  |     pub functions: HashMap<String, FunctionIR>,
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `FunctionIR`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `FunctionIR` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 295 others
     = note: required for `std::collections::HashMap<std::string::String, FunctionIR>` to implement `Deserialize<'_>`
note: required by a bound in `next_value`
    --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde-1.0.219\src\de\mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `GlobalIR: Deserialize<'_>` is not satisfied
    --> src\ksl_ir.rs:271:18
     |
271  |     pub globals: HashMap<String, GlobalIR>,
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `GlobalIR`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `GlobalIR` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 295 others
     = note: required for `std::collections::HashMap<std::string::String, GlobalIR>` to implement `Deserialize<'_>`
note: required by a bound in `next_value`
    --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde-1.0.219\src\de\mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `PluginOpIR: Deserialize<'_>` is not satisfied
    --> src\ksl_ir.rs:273:21
     |
273  |     pub plugin_ops: HashMap<String, PluginOpIR>,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `PluginOpIR`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `PluginOpIR` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 295 others
     = note: required for `std::collections::HashMap<std::string::String, PluginOpIR>` to implement `Deserialize<'_>`
note: required by a bound in `next_value`
    --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde-1.0.219\src\de\mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `FunctionIR: Deserialize<'_>` is not satisfied
   --> src\ksl_ir.rs:255:35
    |
255 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `FunctionIR`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `FunctionIR` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `Deserialize<'de>`:
              &'a Path
              &'a [u8]
              &'a str
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
            and 295 others
    = note: required for `std::collections::HashMap<std::string::String, FunctionIR>` to implement `Deserialize<'_>`
note: required by a bound in `ksl_compiler::_::_serde::__private::de::missing_field`
   --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde-1.0.219\src\private\de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `GlobalIR: Deserialize<'_>` is not satisfied
   --> src\ksl_ir.rs:255:35
    |
255 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `GlobalIR`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `GlobalIR` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `Deserialize<'de>`:
              &'a Path
              &'a [u8]
              &'a str
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
            and 295 others
    = note: required for `std::collections::HashMap<std::string::String, GlobalIR>` to implement `Deserialize<'_>`
note: required by a bound in `ksl_compiler::_::_serde::__private::de::missing_field`
   --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde-1.0.219\src\private\de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `PluginOpIR: Deserialize<'_>` is not satisfied
   --> src\ksl_ir.rs:255:35
    |
255 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `PluginOpIR`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `PluginOpIR` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `Deserialize<'de>`:
              &'a Path
              &'a [u8]
              &'a str
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
            and 295 others
    = note: required for `std::collections::HashMap<std::string::String, PluginOpIR>` to implement `Deserialize<'_>`
note: required by a bound in `ksl_compiler::_::_serde::__private::de::missing_field`
   --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde-1.0.219\src\private\de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `clone` found for struct `ContractABI` in the current scope
  --> src\ksl_abi.rs:83:67
   |
15 | pub struct ContractABI {
   | ---------------------- method `clone` not found for this struct
...
83 |         self.contracts.insert(contract_name.to_string(), contract.clone());
   |                                                                   ^^^^^ method not found in `ContractABI`
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following trait defines an item `clone`, perhaps you need to implement it:
           candidate #1: `Clone`

error[E0609]: no field `ty` on type `&(std::string::String, ksl_ast::Type)`
  --> src\ksl_abi.rs:90:55
   |
90 |             .map(|param| self.type_to_abi_type(&param.ty))
   |                                                       ^^ unknown field

error[E0609]: no field `return_type` on type `&ksl_ast::Function`
  --> src\ksl_abi.rs:93:32
   |
93 |         let return_type = func.return_type.as_ref()
   |                                ^^^^^^^^^^^ unknown field
   |
help: a field with a similar name exists
   |
93 -         let return_type = func.return_type.as_ref()
93 +         let return_type = func.ret_type.as_ref()
   |

error[E0609]: no field `is_public` on type `&ksl_ast::Function`
   --> src\ksl_abi.rs:101:29
    |
101 |             is_public: func.is_public,
    |                             ^^^^^^^^^ unknown field
    |
    = note: available fields are: `name`, `params`, `ret_type`, `body`, `attributes`

error[E0599]: no variant or associated item named `Primitive` found for enum `ksl_ast::Type` in the current scope
   --> src\ksl_abi.rs:116:19
    |
116 |             Type::Primitive(name) => Ok(TypeABI {
    |                   ^^^^^^^^^ variant or associated item not found in `Type`
    |
   ::: src\ksl_ast.rs:141:1
    |
141 | pub enum Type {
    | ------------- variant or associated item `Primitive` not found for this enum

error[E0308]: mismatched types
   --> src\ksl_abi.rs:113:33
    |
113 |                     array_size: *size,
    |                                 ^^^^^ expected `Option<usize>`, found `usize`
    |
    = note: expected enum `std::option::Option<usize>`
               found type `usize`
help: try wrapping the expression in `Some`
    |
113 |                     array_size: Some(*size),
    |                                 +++++     +

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_abi.rs:121:22
    |
121 |               _ => Err(KslError::type_error(
    |  ______________________^^^^^^^^^^^^^^^^^^^^-
122 | |                 format!("Unsupported type for ABI: {:?}", ty),
123 | |                 SourcePosition::new(1, 1),
124 | |             )),
    | |_____________- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
121 -             _ => Err(KslError::type_error(
122 -                 format!("Unsupported type for ABI: {:?}", ty),
123 -                 SourcePosition::new(1, 1),
124 -             )),
121 +             _ => Err(KslError::type_error(format!("Unsupported type for ABI: {:?}", ty), SourcePosition::new(1, 1), /* std::string::String */)),
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_abi.rs:131:13
    |
131 |               KslError::type_error(
    |  _____________^^^^^^^^^^^^^^^^^^^^-
132 | |                 format!("Contract not found: {}", contract_name),
133 | |                 SourcePosition::new(1, 1),
134 | |             )
    | |_____________- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
131 -             KslError::type_error(
132 -                 format!("Contract not found: {}", contract_name),
133 -                 SourcePosition::new(1, 1),
134 -             )
131 +             KslError::type_error(format!("Contract not found: {}", contract_name), SourcePosition::new(1, 1), /* std::string::String */)
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_abi.rs:138:13
    |
138 |               KslError::type_error(
    |  _____________^^^^^^^^^^^^^^^^^^^^-
139 | |                 format!("Failed to serialize ABI: {}", e),
140 | |                 SourcePosition::new(1, 1),
141 | |             )
    | |_____________- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
138 -             KslError::type_error(
139 -                 format!("Failed to serialize ABI: {}", e),
140 -                 SourcePosition::new(1, 1),
141 -             )
138 +             KslError::type_error(format!("Failed to serialize ABI: {}", e), SourcePosition::new(1, 1), /* std::string::String */)
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_abi.rs:145:13
    |
145 |               KslError::type_error(
    |  _____________^^^^^^^^^^^^^^^^^^^^-
146 | |                 format!("Failed to write ABI file: {}", e),
147 | |                 SourcePosition::new(1, 1),
148 | |             )
    | |_____________- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
145 -             KslError::type_error(
146 -                 format!("Failed to write ABI file: {}", e),
147 -                 SourcePosition::new(1, 1),
148 -             )
145 +             KslError::type_error(format!("Failed to write ABI file: {}", e), SourcePosition::new(1, 1), /* std::string::String */)
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:115:26
    |
115 |               .map_err(|e| KslError::type_error(
    |  __________________________^^^^^^^^^^^^^^^^^^^^-
116 | |                 format!("Failed to bind to port {}: {}", self.config.port, e),
117 | |                 pos,
118 | |             ))?;
    | |_____________- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
115 -             .map_err(|e| KslError::type_error(
116 -                 format!("Failed to bind to port {}: {}", self.config.port, e),
117 -                 pos,
118 -             ))?;
115 +             .map_err(|e| KslError::type_error(format!("Failed to bind to port {}: {}", self.config.port, e), pos, /* std::string::String */))?;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:122:45
    |
122 |               let stream = stream.map_err(|e| KslError::type_error(
    |  _____________________________________________^^^^^^^^^^^^^^^^^^^^-
123 | |                 format!("Failed to accept connection: {}", e),
124 | |                 pos,
125 | |             ))?;
    | |_____________- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
122 -             let stream = stream.map_err(|e| KslError::type_error(
123 -                 format!("Failed to accept connection: {}", e),
124 -                 pos,
125 -             ))?;
122 +             let stream = stream.map_err(|e| KslError::type_error(format!("Failed to accept connection: {}", e), pos, /* std::string::String */))?;
    |

error[E0599]: no method named `clone` found for mutable reference `&mut LspServer` in the current scope
   --> src\ksl_lsp.rs:126:35
    |
126 |             let mut server = self.clone();
    |                                   ^^^^^ method not found in `&mut LspServer`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the trait `Clone` defines an item `clone`, but is explicitly unimplemented

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:146:30
    |
146 |                 .map_err(|e| KslError::type_error(format!("Failed to read from stream: {}", e), pos))?;
    |                              ^^^^^^^^^^^^^^^^^^^^--------------------------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
146 -                 .map_err(|e| KslError::type_error(format!("Failed to read from stream: {}", e), pos))?;
146 +                 .map_err(|e| KslError::type_error(format!("Failed to read from stream: {}", e), pos, /* std::string::String */))?;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:157:30
    |
157 |                 .map_err(|e| KslError::type_error(format!("Invalid Content-Length: {}", e), pos))?;
    |                              ^^^^^^^^^^^^^^^^^^^^----------------------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
157 -                 .map_err(|e| KslError::type_error(format!("Invalid Content-Length: {}", e), pos))?;
157 +                 .map_err(|e| KslError::type_error(format!("Invalid Content-Length: {}", e), pos, /* std::string::String */))?;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:159:30
    |
159 |                 .map_err(|e| KslError::type_error(format!("Failed to read from stream: {}", e), pos))?;
    |                              ^^^^^^^^^^^^^^^^^^^^--------------------------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
159 -                 .map_err(|e| KslError::type_error(format!("Failed to read from stream: {}", e), pos))?;
159 +                 .map_err(|e| KslError::type_error(format!("Failed to read from stream: {}", e), pos, /* std::string::String */))?;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:164:30
    |
164 |                 .map_err(|e| KslError::type_error(format!("Failed to read message: {}", e), pos))?;
    |                              ^^^^^^^^^^^^^^^^^^^^----------------------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
164 -                 .map_err(|e| KslError::type_error(format!("Failed to read message: {}", e), pos))?;
164 +                 .map_err(|e| KslError::type_error(format!("Failed to read message: {}", e), pos, /* std::string::String */))?;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:166:30
    |
166 |                 .map_err(|e| KslError::type_error(format!("Failed to parse JSON-RPC message: {}", e), pos))?;
    |                              ^^^^^^^^^^^^^^^^^^^^--------------------------------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
166 -                 .map_err(|e| KslError::type_error(format!("Failed to parse JSON-RPC message: {}", e), pos))?;
166 +                 .map_err(|e| KslError::type_error(format!("Failed to parse JSON-RPC message: {}", e), pos, /* std::string::String */))?;
    |

error[E0599]: no method named `handle_request` found for mutable reference `&mut LspServer` in the current scope
   --> src\ksl_lsp.rs:175:22
    |
175 |                 self.handle_request(&message)?
    |                      ^^^^^^^^^^^^^^
    |
help: there is a method `handle_request_async` with a similar name
    |
175 |                 self.handle_request_async(&message)?
    |                                    ++++++

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:179:30
    |
179 |                 .map_err(|e| KslError::type_error(format!("Failed to serialize response: {}", e), pos))?;
    |                              ^^^^^^^^^^^^^^^^^^^^----------------------------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
179 -                 .map_err(|e| KslError::type_error(format!("Failed to serialize response: {}", e), pos))?;
179 +                 .map_err(|e| KslError::type_error(format!("Failed to serialize response: {}", e), pos, /* std::string::String */))?;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:182:30
    |
182 |                 .map_err(|e| KslError::type_error(format!("Failed to write to stream: {}", e), pos))?;
    |                              ^^^^^^^^^^^^^^^^^^^^-------------------------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
182 -                 .map_err(|e| KslError::type_error(format!("Failed to write to stream: {}", e), pos))?;
182 +                 .map_err(|e| KslError::type_error(format!("Failed to write to stream: {}", e), pos, /* std::string::String */))?;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:184:30
    |
184 |                 .map_err(|e| KslError::type_error(format!("Failed to write to stream: {}", e), pos))?;
    |                              ^^^^^^^^^^^^^^^^^^^^-------------------------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
184 -                 .map_err(|e| KslError::type_error(format!("Failed to write to stream: {}", e), pos))?;
184 +                 .map_err(|e| KslError::type_error(format!("Failed to write to stream: {}", e), pos, /* std::string::String */))?;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:186:30
    |
186 |                 .map_err(|e| KslError::type_error(format!("Failed to flush stream: {}", e), pos))?;
    |                              ^^^^^^^^^^^^^^^^^^^^----------------------------------------------- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
186 -                 .map_err(|e| KslError::type_error(format!("Failed to flush stream: {}", e), pos))?;
186 +                 .map_err(|e| KslError::type_error(format!("Failed to flush stream: {}", e), pos, /* std::string::String */))?;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:393:26
    |
393 |               .map_err(|e| KslError::type_error(
    |  __________________________^^^^^^^^^^^^^^^^^^^^-
394 | |                 format!("Parse error at position {}: {}", e.position, e.message),
395 | |                 pos,
396 | |             ))?;
    | |_____________- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
393 -             .map_err(|e| KslError::type_error(
394 -                 format!("Parse error at position {}: {}", e.position, e.message),
395 -                 pos,
396 -             ))?;
393 +             .map_err(|e| KslError::type_error(format!("Parse error at position {}: {}", e.position, e.message), pos, /* std::string::String */))?;
    |

error[E0599]: no variant named `AsyncFnDecl` found for enum `ksl_parser::AstNode`
   --> src\ksl_lsp.rs:410:26
    |
410 |                 AstNode::AsyncFnDecl { name, .. } => {
    |                          ^^^^^^^^^^^ variant not found in `ksl_parser::AstNode`
    |
   ::: src\ksl_parser.rs:50:1
    |
50  | pub enum AstNode {
    | ---------------- variant `AsyncFnDecl` not found here

error[E0599]: no variant named `Network` found for enum `ksl_parser::AstNode`
   --> src\ksl_lsp.rs:413:26
    |
413 |                 AstNode::Network { name, .. } => {
    |                          ^^^^^^^ variant not found in `ksl_parser::AstNode`
    |
   ::: src\ksl_parser.rs:50:1
    |
50  | pub enum AstNode {
    | ---------------- variant `Network` not found here

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:451:26
    |
451 |               .map_err(|e| KslError::type_error(
    |  __________________________^^^^^^^^^^^^^^^^^^^^-
452 | |                 format!("Parse error at position {}: {}", e.position, e.message),
453 | |                 pos,
454 | |             ))?;
    | |_____________- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
451 -             .map_err(|e| KslError::type_error(
452 -                 format!("Parse error at position {}: {}", e.position, e.message),
453 -                 pos,
454 -             ))?;
451 +             .map_err(|e| KslError::type_error(format!("Parse error at position {}: {}", e.position, e.message), pos, /* std::string::String */))?;
    |

error[E0599]: no variant named `AsyncFnDecl` found for enum `ksl_parser::AstNode`
   --> src\ksl_lsp.rs:495:30
    |
495 |                     AstNode::AsyncFnDecl { name, .. } if name == &ident => {
    |                              ^^^^^^^^^^^ variant not found in `ksl_parser::AstNode`
    |
   ::: src\ksl_parser.rs:50:1
    |
50  | pub enum AstNode {
    | ---------------- variant `AsyncFnDecl` not found here

error[E0599]: no variant named `Network` found for enum `ksl_parser::AstNode`
   --> src\ksl_lsp.rs:504:30
    |
504 |                     AstNode::Network { name, .. } if name == &ident => {
    |                              ^^^^^^^ variant not found in `ksl_parser::AstNode`
    |
   ::: src\ksl_parser.rs:50:1
    |
50  | pub enum AstNode {
    | ---------------- variant `Network` not found here

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_lsp.rs:537:26
    |
537 |               .map_err(|e| KslError::type_error(
    |  __________________________^^^^^^^^^^^^^^^^^^^^-
538 | |                 format!("Parse error at position {}: {}", e.position, e.message),
539 | |                 pos,
540 | |             ))?;
    | |_____________- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
537 -             .map_err(|e| KslError::type_error(
538 -                 format!("Parse error at position {}: {}", e.position, e.message),
539 -                 pos,
540 -             ))?;
537 +             .map_err(|e| KslError::type_error(format!("Parse error at position {}: {}", e.position, e.message), pos, /* std::string::String */))?;
    |

error[E0599]: no variant named `AsyncFnDecl` found for enum `ksl_parser::AstNode`
   --> src\ksl_lsp.rs:579:30
    |
579 |                     AstNode::AsyncFnDecl { name, doc, params, return_type, .. } if name == &ident => {
    |                              ^^^^^^^^^^^ variant not found in `ksl_parser::AstNode`
    |
   ::: src\ksl_parser.rs:50:1
    |
50  | pub enum AstNode {
    | ---------------- variant `AsyncFnDecl` not found here

error[E0599]: no variant named `Network` found for enum `ksl_parser::AstNode`
   --> src\ksl_lsp.rs:595:30
    |
595 |                     AstNode::Network { name, doc, .. } if name == &ident => {
    |                              ^^^^^^^ variant not found in `ksl_parser::AstNode`
    |
   ::: src\ksl_parser.rs:50:1
    |
50  | pub enum AstNode {
    | ---------------- variant `Network` not found here

error[E0609]: no field `text` on type `&std::string::String`
   --> src\ksl_lsp.rs:566:68
    |
566 | ...                   contents.push_str(&format!("{}\n", doc.text));
    |                                                              ^^^^ unknown field

error[E0277]: `TypeAnnotation` doesn't implement `std::fmt::Display`
   --> src\ksl_lsp.rs:569:64
    |
569 | ...                   .map(|(p, t)| format!("{}: {}", p, t))
    |                                                          ^ `TypeAnnotation` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TypeAnnotation`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `TypeAnnotation` doesn't implement `std::fmt::Display`
   --> src\ksl_lsp.rs:571:42
    |
571 | ...                   .join(", "), return_type));
    |                                    ^^^^^^^^^^^ `TypeAnnotation` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TypeAnnotation`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0609]: no field `text` on type `&_`
   --> src\ksl_lsp.rs:582:68
    |
582 | ...                   contents.push_str(&format!("{}\n", doc.text));
    |                                                              ^^^^ unknown field

error[E0609]: no field `text` on type `&_`
   --> src\ksl_lsp.rs:598:68
    |
598 | ...                   contents.push_str(&format!("{}\n", doc.text));
    |                                                              ^^^^ unknown field

error[E0277]: the trait bound `ZkProofType: Serialize` is not satisfied
   --> src\ksl_types.rs:37:35
    |
37  | #[derive(Debug, PartialEq, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^ the trait `Serialize` is not implemented for `ZkProofType`
...
85  |     ZkProof(ZkProofType),
    |             ----------- required by a bound introduced by this call
    |
    = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ZkProofType` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `Serialize`:
              &'a T
              &'a mut T
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
              (T0, T1, T2, T3, T4)
            and 255 others
note: required by a bound in `serialize_newtype_variant`
   --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde-1.0.219\src\ser\mod.rs:943:21
    |
935 |     fn serialize_newtype_variant<T>(
    |        ------------------------- required by a bound in this associated function
...
943 |         T: ?Sized + Serialize;
    |                     ^^^^^^^^^ required by this bound in `Serializer::serialize_newtype_variant`
    = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `SignatureType: Serialize` is not satisfied
   --> src\ksl_types.rs:37:35
    |
37  | #[derive(Debug, PartialEq, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^ the trait `Serialize` is not implemented for `SignatureType`
...
86  |     Signature(SignatureType),
    |               ------------- required by a bound introduced by this call
    |
    = note: for local types consider adding `#[derive(serde::Serialize)]` to your `SignatureType` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `Serialize`:
              &'a T
              &'a mut T
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
              (T0, T1, T2, T3, T4)
            and 255 others
note: required by a bound in `serialize_newtype_variant`
   --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde-1.0.219\src\ser\mod.rs:943:21
    |
935 |     fn serialize_newtype_variant<T>(
    |        ------------------------- required by a bound in this associated function
...
943 |         T: ?Sized + Serialize;
    |                     ^^^^^^^^^ required by this bound in `Serializer::serialize_newtype_variant`
    = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ZkProofType: Deserialize<'_>` is not satisfied
    --> src\ksl_types.rs:85:13
     |
85   |     ZkProof(ZkProofType),
     |             ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `ZkProofType`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ZkProofType` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 284 others
note: required by a bound in `newtype_variant`
    --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde-1.0.219\src\de\mod.rs:2125:12
     |
2123 |     fn newtype_variant<T>(self) -> Result<T, Self::Error>
     |        --------------- required by a bound in this associated function
2124 |     where
2125 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `VariantAccess::newtype_variant`

error[E0277]: the trait bound `SignatureType: Deserialize<'_>` is not satisfied
    --> src\ksl_types.rs:86:15
     |
86   |     Signature(SignatureType),
     |               ^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `SignatureType`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `SignatureType` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 284 others
note: required by a bound in `newtype_variant`
    --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde-1.0.219\src\de\mod.rs:2125:12
     |
2123 |     fn newtype_variant<T>(self) -> Result<T, Self::Error>
     |        --------------- required by a bound in this associated function
2124 |     where
2125 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `VariantAccess::newtype_variant`

error[E0599]: no function or associated item named `parse_zkproof_type` found for struct `TypeSystem` in the current scope
   --> src\ksl_types.rs:246:40
    |
149 | pub struct TypeSystem;
    | --------------------- function or associated item `parse_zkproof_type` not found for this struct
...
246 |                 let proof_type = Self::parse_zkproof_type(inner, position)?;
    |                                        ^^^^^^^^^^^^^^^^^^ function or associated item not found in `TypeSystem`

error[E0599]: no function or associated item named `parse_signature_type` found for struct `TypeSystem` in the current scope
   --> src\ksl_types.rs:251:38
    |
149 | pub struct TypeSystem;
    | --------------------- function or associated item `parse_signature_type` not found for this struct
...
251 |                 let sig_type = Self::parse_signature_type(inner, position)?;
    |                                      ^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `TypeSystem`

error[E0308]: mismatched types
   --> src\ksl_types.rs:570:74
    |
570 |             Type::Array(inner, len) => inner.size_in_bytes().map(|s| s * len),
    |                                                                          ^^^ expected `usize`, found `u32`

error[E0277]: cannot multiply `usize` by `&u32`
   --> src\ksl_types.rs:570:72
    |
570 |             Type::Array(inner, len) => inner.size_in_bytes().map(|s| s * len),
    |                                                                        ^ no implementation for `usize * &u32`
    |
    = help: the trait `std::ops::Mul<&u32>` is not implemented for `usize`
    = help: the following other types implement trait `std::ops::Mul<Rhs>`:
              `&usize` implements `std::ops::Mul<usize>`
              `&usize` implements `std::ops::Mul`
              `usize` implements `std::ops::Mul<&usize>`
              `usize` implements `std::ops::Mul<zerocopy::byteorder::Usize<O>>`
              `usize` implements `std::ops::Mul`

error[E0599]: no method named `size_in_bytes` found for reference `&SignatureType` in the current scope
   --> src\ksl_types.rs:603:19
    |
603 |                 a.size_in_bytes() == b.size_in_bytes()
    |                   ^^^^^^^^^^^^^ method not found in `&SignatureType`

error[E0599]: no method named `size_in_bytes` found for reference `&SignatureType` in the current scope
   --> src\ksl_types.rs:603:40
    |
603 |                 a.size_in_bytes() == b.size_in_bytes()
    |                                        ^^^^^^^^^^^^^ method not found in `&SignatureType`

error[E0599]: no variant or associated item named `TypeError` found for enum `KslError` in the current scope
   --> src\ksl_types.rs:728:66
    |
728 | ...> return Err(KslError::TypeError("Cannot convert to generic proof type".into())),
    |                           ^^^^^^^^^ variant or associated item not found in `KslError`
    |
   ::: src\ksl_errors.rs:59:1
    |
59  | pub enum KslError {
    | ----------------- variant or associated item `TypeError` not found for this enum
    |
note: if you're trying to build a new `KslError` consider using one of the following associated functions:
      KslError::parse
      KslError::type_error
      KslError::compile
      KslError::runtime
      KslError::network
   --> src\ksl_errors.rs:97:5
    |
97  |     pub fn parse(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
123 |     pub fn compile(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
136 |     pub fn runtime(message: String, instruction: usize, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
149 |     pub fn network(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is an associated function `type_error` with a similar name
   --> src\ksl_errors.rs:110:5
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `TypeError` found for enum `KslError` in the current scope
   --> src\ksl_types.rs:737:32
    |
737 |             _ => Err(KslError::TypeError(format!(
    |                                ^^^^^^^^^ variant or associated item not found in `KslError`
    |
   ::: src\ksl_errors.rs:59:1
    |
59  | pub enum KslError {
    | ----------------- variant or associated item `TypeError` not found for this enum
    |
note: if you're trying to build a new `KslError` consider using one of the following associated functions:
      KslError::parse
      KslError::type_error
      KslError::compile
      KslError::runtime
      KslError::network
   --> src\ksl_errors.rs:97:5
    |
97  |     pub fn parse(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
123 |     pub fn compile(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
136 |     pub fn runtime(message: String, instruction: usize, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
149 |     pub fn network(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is an associated function `type_error` with a similar name
   --> src\ksl_errors.rs:110:5
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_stdlib_crypto.rs:160:58
    |
160 |           let func = self.get_function(name).ok_or_else(|| KslError::type_error(
    |  __________________________________________________________^^^^^^^^^^^^^^^^^^^^-
161 | |             format!("Undefined cryptographic function: {}", name),
162 | |             position,
163 | |         ))?;
    | |_________- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
160 -         let func = self.get_function(name).ok_or_else(|| KslError::type_error(
161 -             format!("Undefined cryptographic function: {}", name),
162 -             position,
163 -         ))?;
160 +         let func = self.get_function(name).ok_or_else(|| KslError::type_error(format!("Undefined cryptographic function: {}", name), position, /* std::string::String */))?;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_stdlib_crypto.rs:165:24
    |
165 |               return Err(KslError::type_error(
    |  ________________________^^^^^^^^^^^^^^^^^^^^-
166 | |                 format!(
167 | |                     "Expected {} arguments, got {}",
168 | |                     func.params.len(),
...   |
171 | |                 position,
172 | |             ));
    | |_____________- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
165 ~             return Err(KslError::type_error(format!(
166 +                     "Expected {} arguments, got {}",
167 +                     func.params.len(),
168 +                     arg_types.len()
169 ~                 ), position, /* std::string::String */));
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_stdlib_crypto.rs:176:28
    |
176 |                   return Err(KslError::type_error(
    |  ____________________________^^^^^^^^^^^^^^^^^^^^-
177 | |                     format!("Argument type mismatch: expected {:?}, got {:?}", expected, actual),
178 | |                     position,
179 | |                 ));
    | |_________________- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
176 -                 return Err(KslError::type_error(
177 -                     format!("Argument type mismatch: expected {:?}, got {:?}", expected, actual),
178 -                     position,
179 -                 ));
176 +                 return Err(KslError::type_error(format!("Argument type mismatch: expected {:?}, got {:?}", expected, actual), position, /* std::string::String */));
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_stdlib_crypto.rs:192:58
    |
192 |           let func = self.get_function(name).ok_or_else(|| KslError::type_error(
    |  __________________________________________________________^^^^^^^^^^^^^^^^^^^^-
193 | |             format!("Undefined cryptographic function: {}", name),
194 | |             SourcePosition::new(1, 1), // Simplified
195 | |         ))?;
    | |_________- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
192 -         let func = self.get_function(name).ok_or_else(|| KslError::type_error(
193 -             format!("Undefined cryptographic function: {}", name),
194 -             SourcePosition::new(1, 1), // Simplified
195 -         ))?;
192 +         let func = self.get_function(name).ok_or_else(|| KslError::type_error(format!("Undefined cryptographic function: {}", name), SourcePosition::new(1, 1), /* std::string::String */))?;
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_stdlib_crypto.rs:197:24
    |
197 |               return Err(KslError::type_error(
    |  ________________________^^^^^^^^^^^^^^^^^^^^-
198 | |                 format!(
199 | |                     "Expected {} arguments, got {}",
200 | |                     func.params.len(),
...   |
203 | |                 SourcePosition::new(1, 1),
204 | |             ));
    | |_____________- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
197 ~             return Err(KslError::type_error(format!(
198 +                     "Expected {} arguments, got {}",
199 +                     func.params.len(),
200 +                     arg_regs.len()
201 ~                 ), SourcePosition::new(1, 1), /* std::string::String */));
    |

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src\ksl_stdlib_crypto.rs:217:25
    |
217 |               None => Err(KslError::type_error(
    |  _________________________^^^^^^^^^^^^^^^^^^^^-
218 | |                 format!("No implementation for {}", name),
219 | |                 SourcePosition::new(1, 1),
220 | |             )),
    | |_____________- argument #3 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src\ksl_errors.rs:110:12
    |
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |            ^^^^^^^^^^                                            ------------
help: provide the argument
    |
217 -             None => Err(KslError::type_error(
218 -                 format!("No implementation for {}", name),
219 -                 SourcePosition::new(1, 1),
220 -             )),
217 +             None => Err(KslError::type_error(format!("No implementation for {}", name), SourcePosition::new(1, 1), /* std::string::String */)),
    |

error[E0277]: the trait bound `ed25519_dalek::SecretKey: Clone` is not satisfied
   --> src\ksl_stdlib_crypto.rs:242:5
    |
240 | #[derive(Clone)]
    |          ----- in this derive macro expansion
241 | pub struct Ed25519Keypair {
242 |     pub sk: EdSecretKey,
    |     ^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `ed25519_dalek::SecretKey`
    |
    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this function takes 2 arguments but 1 argument was supplied
    --> src\ksl_stdlib_crypto.rs:278:18
     |
278  |         let sk = BlsSecretKey::key_gen(ikm);
     |                  ^^^^^^^^^^^^^^^^^^^^^----- argument #2 of type `&[u8]` is missing
     |
note: associated function defined here
    --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\blst-0.3.14\src\lib.rs:2193:5
     |
2193 | /     sig_variant_impl!(
2194 | |         "MinPk",
2195 | |         blst_p1,
2196 | |         blst_p1_affine,
...    |
2230 | |         blst_p2_in_g2,
2231 | |     );
     | |_____^
     = note: this error originates in the macro `sig_variant_impl` (in Nightly builds, run with -Z macro-backtrace for more info)
help: provide the argument
     |
278  -         let sk = BlsSecretKey::key_gen(ikm);
278  +         let sk = BlsSecretKey::key_gen(ikm, /* &[u8] */);
     |

error[E0599]: no method named `sk_to_pk` found for enum `Result` in the current scope
    --> src\ksl_stdlib_crypto.rs:279:21
     |
279  |         let pk = sk.sk_to_pk();
     |                     ^^^^^^^^ method not found in `Result<SecretKey, BLST_ERROR>`
     |
note: the method `sk_to_pk` exists on the type `blst::min_pk::SecretKey`
    --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\blst-0.3.14\src\lib.rs:2193:5
     |
2193 | /     sig_variant_impl!(
2194 | |         "MinPk",
2195 | |         blst_p1,
2196 | |         blst_p1_affine,
...    |
2230 | |         blst_p2_in_g2,
2231 | |     );
     | |_____^
     = note: this error originates in the macro `sig_variant_impl` (in Nightly builds, run with -Z macro-backtrace for more info)
help: use the `?` operator to extract the `blst::min_pk::SecretKey` value, propagating a `Result::Err` value to the caller
     |
279  |         let pk = sk?.sk_to_pk();
     |                    +

error[E0308]: mismatched types
   --> src\ksl_stdlib_crypto.rs:280:25
    |
280 |         Ok(BlsKeypair { sk, pk })
    |                         ^^ expected `SecretKey`, found `Result<SecretKey, BLST_ERROR>`
    |
    = note: expected struct `blst::min_pk::SecretKey`
                 found enum `Result<blst::min_pk::SecretKey, BLST_ERROR>`
help: use the `?` operator to extract the `Result<blst::min_pk::SecretKey, BLST_ERROR>` value, propagating a `Result::Err` value to the caller
    |
280 |         Ok(BlsKeypair { sk: sk?, pk })
    |                           +++++

error[E0599]: no method named `sign` found for struct `ed25519_dalek::Keypair` in the current scope
   --> src\ksl_stdlib_crypto.rs:295:20
    |
295 |         Ok(keypair.sign(message))
    |                    ^^^^
    |
   ::: C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\signature-1.6.4\src\signer.rs:15:8
    |
15  |     fn sign(&self, msg: &[u8]) -> S {
    |        ---- the method is available for `ed25519_dalek::Keypair` here
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `Signer` which provides `sign` is implemented but not in scope; perhaps you want to import it
    |
5   + use ed25519_dalek::Signer;
    |
help: there is a method `try_sign` with a similar name
    |
295 |         Ok(keypair.try_sign(message))
    |                    ++++

error[E0599]: no method named `sorted` found for struct `std::slice::Iter` in the current scope
   --> src\ksl_stdlib_crypto.rs:391:18
    |
390 |               let ascending: u64 = digits.iter()
    |  __________________________________-
391 | |                 .sorted()
    | |_________________-^^^^^^
    |
    = help: items from traits can only be used if the trait is in scope
help: the following traits which provide `sorted` are implemented but not in scope; perhaps you want to import one of them
    |
373 +     use itertools::Itertools;
    |
373 +     use itertools::Itertools;
    |
help: there is a method `is_sorted` with a similar name
    |
391 |                 .is_sorted()
    |                  +++

error[E0599]: no method named `sorted_by` found for struct `std::slice::Iter` in the current scope
   --> src\ksl_stdlib_crypto.rs:395:18
    |
394 |               let descending: u64 = digits.iter()
    |  ___________________________________-
395 | |                 .sorted_by(|a, b| b.cmp(a))
    | |_________________-^^^^^^^^^
    |
    = help: items from traits can only be used if the trait is in scope
help: the following traits which provide `sorted_by` are implemented but not in scope; perhaps you want to import one of them
    |
373 +     use itertools::Itertools;
    |
373 +     use itertools::Itertools;
    |
help: there is a method `is_sorted_by` with a similar name
    |
395 |                 .is_sorted_by(|a, b| b.cmp(a))
    |                  +++

error[E0599]: no variant or associated item named `ValidationFailed` found for enum `KslError` in the current scope
   --> src\ksl_validator_contract.rs:46:30
    |
46  |         return Err(KslError::ValidationFailed("Block hash is not Kaprekar stable".into()));
    |                              ^^^^^^^^^^^^^^^^ variant or associated item not found in `KslError`
    |
   ::: src\ksl_errors.rs:59:1
    |
59  | pub enum KslError {
    | ----------------- variant or associated item `ValidationFailed` not found for this enum
    |
note: if you're trying to build a new `KslError` consider using one of the following associated functions:
      KslError::parse
      KslError::type_error
      KslError::compile
      KslError::runtime
      KslError::network
   --> src\ksl_errors.rs:97:5
    |
97  |     pub fn parse(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
123 |     pub fn compile(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
136 |     pub fn runtime(message: String, instruction: usize, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
149 |     pub fn network(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0609]: no field `signature` on type `&BlockHeader`
  --> src\ksl_validator_contract.rs:51:41
   |
51 |     if !bls_verify(&block_hash, &header.signature, &validator_pubkey) {
   |                                         ^^^^^^^^^ unknown field
   |
   = note: available fields are: `parent`, `nonce`, `timestamp`, `miner`, `shard`

error[E0599]: no variant or associated item named `ValidationFailed` found for enum `KslError` in the current scope
   --> src\ksl_validator_contract.rs:52:30
    |
52  |         return Err(KslError::ValidationFailed("Invalid block signature".into()));
    |                              ^^^^^^^^^^^^^^^^ variant or associated item not found in `KslError`
    |
   ::: src\ksl_errors.rs:59:1
    |
59  | pub enum KslError {
    | ----------------- variant or associated item `ValidationFailed` not found for this enum
    |
note: if you're trying to build a new `KslError` consider using one of the following associated functions:
      KslError::parse
      KslError::type_error
      KslError::compile
      KslError::runtime
      KslError::network
   --> src\ksl_errors.rs:97:5
    |
97  |     pub fn parse(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
123 |     pub fn compile(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
136 |     pub fn runtime(message: String, instruction: usize, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
149 |     pub fn network(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `ValidationFailed` found for enum `KslError` in the current scope
   --> src\ksl_validator_contract.rs:57:30
    |
57  |         return Err(KslError::ValidationFailed("Invalid nonce".into()));
    |                              ^^^^^^^^^^^^^^^^ variant or associated item not found in `KslError`
    |
   ::: src\ksl_errors.rs:59:1
    |
59  | pub enum KslError {
    | ----------------- variant or associated item `ValidationFailed` not found for this enum
    |
note: if you're trying to build a new `KslError` consider using one of the following associated functions:
      KslError::parse
      KslError::type_error
      KslError::compile
      KslError::runtime
      KslError::network
   --> src\ksl_errors.rs:97:5
    |
97  |     pub fn parse(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
123 |     pub fn compile(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
136 |     pub fn runtime(message: String, instruction: usize, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
149 |     pub fn network(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `ValidationFailed` found for enum `KslError` in the current scope
   --> src\ksl_validator_contract.rs:79:30
    |
79  |         return Err(KslError::ValidationFailed("Block timestamp is in the future".into()));
    |                              ^^^^^^^^^^^^^^^^ variant or associated item not found in `KslError`
    |
   ::: src\ksl_errors.rs:59:1
    |
59  | pub enum KslError {
    | ----------------- variant or associated item `ValidationFailed` not found for this enum
    |
note: if you're trying to build a new `KslError` consider using one of the following associated functions:
      KslError::parse
      KslError::type_error
      KslError::compile
      KslError::runtime
      KslError::network
   --> src\ksl_errors.rs:97:5
    |
97  |     pub fn parse(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
123 |     pub fn compile(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
136 |     pub fn runtime(message: String, instruction: usize, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
149 |     pub fn network(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `ValidationFailed` found for enum `KslError` in the current scope
   --> src\ksl_validator_contract.rs:86:30
    |
86  |         return Err(KslError::ValidationFailed("Total supply exceeds maximum".into()));
    |                              ^^^^^^^^^^^^^^^^ variant or associated item not found in `KslError`
    |
   ::: src\ksl_errors.rs:59:1
    |
59  | pub enum KslError {
    | ----------------- variant or associated item `ValidationFailed` not found for this enum
    |
note: if you're trying to build a new `KslError` consider using one of the following associated functions:
      KslError::parse
      KslError::type_error
      KslError::compile
      KslError::runtime
      KslError::network
   --> src\ksl_errors.rs:97:5
    |
97  |     pub fn parse(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
123 |     pub fn compile(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
136 |     pub fn runtime(message: String, instruction: usize, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
149 |     pub fn network(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `ValidationFailed` found for enum `KslError` in the current scope
   --> src\ksl_validator_contract.rs:92:30
    |
92  |         return Err(KslError::ValidationFailed("Validator trust score too low".into()));
    |                              ^^^^^^^^^^^^^^^^ variant or associated item not found in `KslError`
    |
   ::: src\ksl_errors.rs:59:1
    |
59  | pub enum KslError {
    | ----------------- variant or associated item `ValidationFailed` not found for this enum
    |
note: if you're trying to build a new `KslError` consider using one of the following associated functions:
      KslError::parse
      KslError::type_error
      KslError::compile
      KslError::runtime
      KslError::network
   --> src\ksl_errors.rs:97:5
    |
97  |     pub fn parse(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
123 |     pub fn compile(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
136 |     pub fn runtime(message: String, instruction: usize, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
149 |     pub fn network(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> src\ksl_validator_contract.rs:103:47
    |
103 |     let message = [&tx.sender, &tx.recipient, &tx.amount.to_be_bytes()].concat();
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&Vec<u8>`, found `&[u8; 8]`
    |
    = note: expected reference `&Vec<u8>`
               found reference `&[u8; 8]`

error[E0599]: no variant or associated item named `ValidationFailed` found for enum `KslError` in the current scope
   --> src\ksl_validator_contract.rs:105:30
    |
105 |         return Err(KslError::ValidationFailed("Invalid transaction signature".into()));
    |                              ^^^^^^^^^^^^^^^^ variant or associated item not found in `KslError`
    |
   ::: src\ksl_errors.rs:59:1
    |
59  | pub enum KslError {
    | ----------------- variant or associated item `ValidationFailed` not found for this enum
    |
note: if you're trying to build a new `KslError` consider using one of the following associated functions:
      KslError::parse
      KslError::type_error
      KslError::compile
      KslError::runtime
      KslError::network
   --> src\ksl_errors.rs:97:5
    |
97  |     pub fn parse(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
123 |     pub fn compile(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
136 |     pub fn runtime(message: String, instruction: usize, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
149 |     pub fn network(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `ValidationFailed` found for enum `KslError` in the current scope
   --> src\ksl_validator_contract.rs:112:30
    |
112 |         return Err(KslError::ValidationFailed("Insufficient balance".into()));
    |                              ^^^^^^^^^^^^^^^^ variant or associated item not found in `KslError`
    |
   ::: src\ksl_errors.rs:59:1
    |
59  | pub enum KslError {
    | ----------------- variant or associated item `ValidationFailed` not found for this enum
    |
note: if you're trying to build a new `KslError` consider using one of the following associated functions:
      KslError::parse
      KslError::type_error
      KslError::compile
      KslError::runtime
      KslError::network
   --> src\ksl_errors.rs:97:5
    |
97  |     pub fn parse(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
123 |     pub fn compile(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
136 |     pub fn runtime(message: String, instruction: usize, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
149 |     pub fn network(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no function or associated item named `new` found for struct `CoreWrapper` in the current scope
   --> src\ksl_validator_contract.rs:131:39
    |
131 |     let mut hasher = sha3::Keccak256::new();
    |                                       ^^^ function or associated item not found in `CoreWrapper<Keccak256Core>`
    |
note: if you're trying to build a new `CoreWrapper<Keccak256Core>`, consider using `CoreWrapper::<T>::from_core` which returns `CoreWrapper<_>`
   --> C:\Users\ecomm\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\digest-0.10.7\src\core_api\wrapper.rs:70:5
    |
70  |     pub fn from_core(core: T) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is in scope
help: the following traits which provide `new` are implemented but not in scope; perhaps you want to import one of them
    |
1   + use aes_gcm::KeyInit;
    |
1   + use cipher::KeyIvInit;
    |
1   + use cipher::typenum::Bit;
    |
1   + use cranelift_codegen::machinst::MachInstEmitState;
    |
      and 19 other candidates

error[E0599]: no variant or associated item named `ValidationFailed` found for enum `KslError` in the current scope
   --> src\ksl_validator_contract.rs:142:30
    |
142 |         return Err(KslError::ValidationFailed("Invalid transaction inclusion proof".into()));
    |                              ^^^^^^^^^^^^^^^^ variant or associated item not found in `KslError`
    |
   ::: src\ksl_errors.rs:59:1
    |
59  | pub enum KslError {
    | ----------------- variant or associated item `ValidationFailed` not found for this enum
    |
note: if you're trying to build a new `KslError` consider using one of the following associated functions:
      KslError::parse
      KslError::type_error
      KslError::compile
      KslError::runtime
      KslError::network
   --> src\ksl_errors.rs:97:5
    |
97  |     pub fn parse(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
123 |     pub fn compile(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
136 |     pub fn runtime(message: String, instruction: usize, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
149 |     pub fn network(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `ValidationFailed` found for enum `KslError` in the current scope
   --> src\ksl_validator_contract.rs:160:30
    |
160 |         return Err(KslError::ValidationFailed("Invalid cross-shard proof".into()));
    |                              ^^^^^^^^^^^^^^^^ variant or associated item not found in `KslError`
    |
   ::: src\ksl_errors.rs:59:1
    |
59  | pub enum KslError {
    | ----------------- variant or associated item `ValidationFailed` not found for this enum
    |
note: if you're trying to build a new `KslError` consider using one of the following associated functions:
      KslError::parse
      KslError::type_error
      KslError::compile
      KslError::runtime
      KslError::network
   --> src\ksl_errors.rs:97:5
    |
97  |     pub fn parse(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
123 |     pub fn compile(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
136 |     pub fn runtime(message: String, instruction: usize, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
149 |     pub fn network(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> src\ksl_validator_contract.rs:164:47
    |
164 |     let message = [&tx.sender, &tx.recipient, &tx.amount.to_be_bytes()].concat();
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&Vec<u8>`, found `&[u8; 8]`
    |
    = note: expected reference `&Vec<u8>`
               found reference `&[u8; 8]`

error[E0599]: no variant or associated item named `ValidationFailed` found for enum `KslError` in the current scope
   --> src\ksl_validator_contract.rs:166:30
    |
166 |         return Err(KslError::ValidationFailed("Invalid transaction signature".into()));
    |                              ^^^^^^^^^^^^^^^^ variant or associated item not found in `KslError`
    |
   ::: src\ksl_errors.rs:59:1
    |
59  | pub enum KslError {
    | ----------------- variant or associated item `ValidationFailed` not found for this enum
    |
note: if you're trying to build a new `KslError` consider using one of the following associated functions:
      KslError::parse
      KslError::type_error
      KslError::compile
      KslError::runtime
      KslError::network
   --> src\ksl_errors.rs:97:5
    |
97  |     pub fn parse(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
123 |     pub fn compile(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
136 |     pub fn runtime(message: String, instruction: usize, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
149 |     pub fn network(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `ValidationFailed` found for enum `KslError` in the current scope
   --> src\ksl_validator_contract.rs:173:30
    |
173 |         return Err(KslError::ValidationFailed("Insufficient balance".into()));
    |                              ^^^^^^^^^^^^^^^^ variant or associated item not found in `KslError`
    |
   ::: src\ksl_errors.rs:59:1
    |
59  | pub enum KslError {
    | ----------------- variant or associated item `ValidationFailed` not found for this enum
    |
note: if you're trying to build a new `KslError` consider using one of the following associated functions:
      KslError::parse
      KslError::type_error
      KslError::compile
      KslError::runtime
      KslError::network
   --> src\ksl_errors.rs:97:5
    |
97  |     pub fn parse(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
123 |     pub fn compile(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
136 |     pub fn runtime(message: String, instruction: usize, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
149 |     pub fn network(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `ValidationFailed` found for enum `KslError` in the current scope
   --> src\ksl_validator_contract.rs:197:32
    |
197 |         .map_err(|_| KslError::ValidationFailed("Invalid shard roots format".into()))?;
    |                                ^^^^^^^^^^^^^^^^ variant or associated item not found in `KslError`
    |
   ::: src\ksl_errors.rs:59:1
    |
59  | pub enum KslError {
    | ----------------- variant or associated item `ValidationFailed` not found for this enum
    |
note: if you're trying to build a new `KslError` consider using one of the following associated functions:
      KslError::parse
      KslError::type_error
      KslError::compile
      KslError::runtime
      KslError::network
   --> src\ksl_errors.rs:97:5
    |
97  |     pub fn parse(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
110 |     pub fn type_error(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
123 |     pub fn compile(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
136 |     pub fn runtime(message: String, instruction: usize, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
149 |     pub fn network(message: String, position: SourcePosition, code: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: variable does not need to be mutable
   --> src\scaffold_lint.rs:250:13
    |
250 |         let mut results = Vec::new();
    |             ----^^^^^^^
    |             |
    |             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> src\scaffold_lint.rs:260:13
    |
260 |         let mut results = Vec::new();
    |             ----^^^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `test_case`
   --> src\scaffold_lint.rs:316:29
    |
316 |     fn run_test_case(&self, test_case: &TestCase) -> Vec<TestResult> {
    |                             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_test_case`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: variable does not need to be mutable
   --> src\scaffold_lint.rs:317:13
    |
317 |         let mut results = Vec::new();
    |             ----^^^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `message`
   --> src\ksl_stdlib_crypto.rs:428:23
    |
428 |     pub fn bls_verify(message: &[u8], signature: &[u8], public_key: &[u8]) -> bool {
    |                       ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_message`

warning: unused variable: `signature`
   --> src\ksl_stdlib_crypto.rs:428:39
    |
428 |     pub fn bls_verify(message: &[u8], signature: &[u8], public_key: &[u8]) -> bool {
    |                                       ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_signature`

warning: unused variable: `public_key`
   --> src\ksl_stdlib_crypto.rs:428:57
    |
428 |     pub fn bls_verify(message: &[u8], signature: &[u8], public_key: &[u8]) -> bool {
    |                                                         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_public_key`

warning: unused variable: `message`
   --> src\ksl_stdlib_crypto.rs:439:27
    |
439 |     pub fn ed25519_verify(message: &[u8], signature: &[u8], public_key: &[u8]) -> bool {
    |                           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_message`

warning: unused variable: `signature`
   --> src\ksl_stdlib_crypto.rs:439:43
    |
439 |     pub fn ed25519_verify(message: &[u8], signature: &[u8], public_key: &[u8]) -> bool {
    |                                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_signature`

warning: unused variable: `public_key`
   --> src\ksl_stdlib_crypto.rs:439:61
    |
439 |     pub fn ed25519_verify(message: &[u8], signature: &[u8], public_key: &[u8]) -> bool {
    |                                                             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_public_key`

Some errors have detailed explanations: E0026, E0061, E0255, E0277, E0308, E0364, E0365, E0432, E0433...
For more information about an error, try `rustc --explain E0026`.
warning: `kapra_chain` (lib) generated 43 warnings
error: could not compile `kapra_chain` (lib) due to 255 previous errors; 43 warnings emitted
PS C:\rn\ksl>